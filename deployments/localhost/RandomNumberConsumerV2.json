{
  "address": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "ReturnedRandomness",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_randomWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_requestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x539b19ac6fc3c98e8100fe833500fbe67eb9df59ad4901c623cd5bbfdd7a8539",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x8A791620dd6260079BF849Dc5567aDC3F2FdC318",
    "transactionIndex": 0,
    "gasUsed": "564345",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9b0a64504a63c6a2313840ec7f7f5f695c74b7e080dcb8fe246035067140213d",
    "transactionHash": "0x539b19ac6fc3c98e8100fe833500fbe67eb9df59ad4901c623cd5bbfdd7a8539",
    "logs": [],
    "blockNumber": 10,
    "cumulativeGasUsed": "564345",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "2",
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc"
  ],
  "numDeployments": 1,
  "solcInputHash": "b7c07317031d52855a0c51565c282445",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"ReturnedRandomness\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_randomWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_requestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"keyHash\":\"- the gas lane to use, which specifies the maximum gas price to bump to\",\"subscriptionId\":\"- the subscription ID that this contract uses for funding requests\",\"vrfCoordinator\":\"- coordinator, check https://docs.chain.link/docs/vrf-contracts/#configurations\"}}},\"title\":\"The RandomNumberConsumerV2 contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor inherits VRFConsumerBaseV2\"},\"requestRandomWords()\":{\"notice\":\"Requests randomness Assumes the subscription is funded sufficiently; \\\"Words\\\" refers to unit of data in Computer Science\"}},\"notice\":\"A contract that gets random values from Chainlink VRF V2\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test/RandomNumberConsumerV2.sol\":\"RandomNumberConsumerV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address internal immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x60507c8bfa96d46e2a7fdd98a3e67378e83833b114a669aeaaea35c6cd1894ab\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/test/RandomNumberConsumerV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// An example of a consumer contract that relies on a subscription for funding.\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n\\n/**\\n * @title The RandomNumberConsumerV2 contract\\n * @notice A contract that gets random values from Chainlink VRF V2\\n */\\ncontract RandomNumberConsumerV2 is VRFConsumerBaseV2 {\\n  VRFCoordinatorV2Interface immutable COORDINATOR;\\n\\n  // Your subscription ID.\\n  uint64 immutable s_subscriptionId;\\n\\n  // The gas lane to use, which specifies the maximum gas price to bump to.\\n  // For a list of available gas lanes on each network,\\n  // see https://docs.chain.link/docs/vrf-contracts/#configurations\\n  bytes32 immutable s_keyHash;\\n\\n  // Depends on the number of requested values that you want sent to the\\n  // fulfillRandomWords() function. Storing each word costs about 20,000 gas,\\n  // so 100,000 is a safe default for this example contract. Test and adjust\\n  // this limit based on the network that you select, the size of the request,\\n  // and the processing of the callback request in the fulfillRandomWords()\\n  // function.\\n  uint32 constant CALLBACK_GAS_LIMIT = 100000;\\n\\n  // The default is 3, but you can set this higher.\\n  uint16 constant REQUEST_CONFIRMATIONS = 3;\\n\\n  // For this example, retrieve 2 random values in one request.\\n  // Cannot exceed VRFCoordinatorV2.MAX_NUM_WORDS.\\n  uint32 constant NUM_WORDS = 2;\\n\\n  uint256[] public s_randomWords;\\n  uint256 public s_requestId;\\n  address s_owner;\\n\\n  event ReturnedRandomness(uint256[] randomWords);\\n\\n  /**\\n   * @notice Constructor inherits VRFConsumerBaseV2\\n   *\\n   * @param subscriptionId - the subscription ID that this contract uses for funding requests\\n   * @param vrfCoordinator - coordinator, check https://docs.chain.link/docs/vrf-contracts/#configurations\\n   * @param keyHash - the gas lane to use, which specifies the maximum gas price to bump to\\n   */\\n  constructor(\\n    uint64 subscriptionId,\\n    address vrfCoordinator,\\n    bytes32 keyHash\\n  ) VRFConsumerBaseV2(vrfCoordinator) {\\n    COORDINATOR = VRFCoordinatorV2Interface(vrfCoordinator);\\n    s_keyHash = keyHash;\\n    s_owner = msg.sender;\\n    s_subscriptionId = subscriptionId;\\n  }\\n\\n  /**\\n   * @notice Requests randomness\\n   * Assumes the subscription is funded sufficiently; \\\"Words\\\" refers to unit of data in Computer Science\\n   */\\n  function requestRandomWords() external onlyOwner {\\n    // Will revert if subscription is not set and funded.\\n    s_requestId = COORDINATOR.requestRandomWords(\\n      s_keyHash,\\n      s_subscriptionId,\\n      REQUEST_CONFIRMATIONS,\\n      CALLBACK_GAS_LIMIT,\\n      NUM_WORDS\\n    );\\n  }\\n\\n  /**\\n   * @notice Callback function used by VRF Coordinator\\n   *\\n   * @param requestId - id of the request\\n   * @param randomWords - array of random results from VRF Coordinator\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n    s_randomWords = randomWords;\\n    emit ReturnedRandomness(randomWords);\\n  }\\n\\n  modifier onlyOwner() {\\n    require(msg.sender == s_owner);\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x3d63a500c3fb9b2fd201b91434c7bd72a7367b7b38d53721ef19dc3bc0cb4f65\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162000b5738038062000b5783398181016040528101906200003891906200015e565b818073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508060e0818152505033600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508267ffffffffffffffff1660c08167ffffffffffffffff1660c01b815250505050506200025f565b6000815190506200012a8162000211565b92915050565b60008151905062000141816200022b565b92915050565b600081519050620001588162000245565b92915050565b6000806000606084860312156200017a57620001796200020c565b5b60006200018a8682870162000147565b93505060206200019d8682870162000119565b9250506040620001b08682870162000130565b9150509250925092565b6000620001c782620001d8565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b6200021c81620001ba565b81146200022857600080fd5b50565b6200023681620001ce565b81146200024257600080fd5b50565b6200025081620001f8565b81146200025c57600080fd5b50565b60805160601c60a05160601c60c05160c01c60e0516108af620002a8600039600061021d0152600061023e015260006101e101526000818160c7015261011b01526108af6000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631fe543e314610051578063e0c862891461006d578063e89e106a14610077578063f6eaffc814610095575b600080fd5b61006b600480360381019061006691906104e7565b6100c5565b005b610075610185565b005b61007f6102df565b60405161008c91906106c0565b60405180910390f35b6100af60048036038101906100aa919061048d565b6102e5565b6040516100bc91906106c0565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161016e929190610622565b60405180910390fd5b6101818282610309565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101df57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006003620186a060026040518663ffffffff1660e01b815260040161028595949392919061066d565b602060405180830381600087803b15801561029f57600080fd5b505af11580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d791906104ba565b600181905550565b60015481565b600081815481106102f557600080fd5b906000526020600020016000915090505481565b806000908051906020019061031f92919061035b565b507fefb16d61046900da527008568620fb9f8420e2f5ed4de3bfbded5035c9362b0e8160405161034f919061064b565b60405180910390a15050565b828054828255906000526020600020908101928215610397579160200282015b8281111561039657825182559160200191906001019061037b565b5b5090506103a491906103a8565b5090565b5b808211156103c15760008160009055506001016103a9565b5090565b60006103d86103d384610700565b6106db565b905080838252602082019050828560208602820111156103fb576103fa610842565b5b60005b8581101561042b57816104118882610463565b8452602084019350602083019250506001810190506103fe565b5050509392505050565b600082601f83011261044a5761044961083d565b5b813561045a8482602086016103c5565b91505092915050565b60008135905061047281610862565b92915050565b60008151905061048781610862565b92915050565b6000602082840312156104a3576104a261084c565b5b60006104b184828501610463565b91505092915050565b6000602082840312156104d0576104cf61084c565b5b60006104de84828501610478565b91505092915050565b600080604083850312156104fe576104fd61084c565b5b600061050c85828601610463565b925050602083013567ffffffffffffffff81111561052d5761052c610847565b5b61053985828601610435565b9150509250929050565b600061054f83836105e6565b60208301905092915050565b61056481610765565b82525050565b60006105758261073c565b61057f8185610754565b935061058a8361072c565b8060005b838110156105bb5781516105a28882610543565b97506105ad83610747565b92505060018101905061058e565b5085935050505092915050565b6105d181610777565b82525050565b6105e081610781565b82525050565b6105ef816107af565b82525050565b6105fe816107af565b82525050565b61060d816107b9565b82525050565b61061c816107c9565b82525050565b6000604082019050610637600083018561055b565b610644602083018461055b565b9392505050565b60006020820190508181036000830152610665818461056a565b905092915050565b600060a08201905061068260008301886105c8565b61068f6020830187610613565b61069c60408301866105d7565b6106a96060830185610604565b6106b66080830184610604565b9695505050505050565b60006020820190506106d560008301846105f5565b92915050565b60006106e56106f6565b90506106f182826107dd565b919050565b6000604051905090565b600067ffffffffffffffff82111561071b5761071a61080e565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b60006107708261078f565b9050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6107e682610851565b810181811067ffffffffffffffff821117156108055761080461080e565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61086b816107af565b811461087657600080fd5b5056fea264697066735822122020d61cbffef859b049c3b3b42af3beacaa4655c99e1a6ba0a167e971da1d050c64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80631fe543e314610051578063e0c862891461006d578063e89e106a14610077578063f6eaffc814610095575b600080fd5b61006b600480360381019061006691906104e7565b6100c5565b005b610075610185565b005b61007f6102df565b60405161008c91906106c0565b60405180910390f35b6100af60048036038101906100aa919061048d565b6102e5565b6040516100bc91906106c0565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461017757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161016e929190610622565b60405180910390fd5b6101818282610309565b5050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146101df57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f00000000000000000000000000000000000000000000000000000000000000006003620186a060026040518663ffffffff1660e01b815260040161028595949392919061066d565b602060405180830381600087803b15801561029f57600080fd5b505af11580156102b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d791906104ba565b600181905550565b60015481565b600081815481106102f557600080fd5b906000526020600020016000915090505481565b806000908051906020019061031f92919061035b565b507fefb16d61046900da527008568620fb9f8420e2f5ed4de3bfbded5035c9362b0e8160405161034f919061064b565b60405180910390a15050565b828054828255906000526020600020908101928215610397579160200282015b8281111561039657825182559160200191906001019061037b565b5b5090506103a491906103a8565b5090565b5b808211156103c15760008160009055506001016103a9565b5090565b60006103d86103d384610700565b6106db565b905080838252602082019050828560208602820111156103fb576103fa610842565b5b60005b8581101561042b57816104118882610463565b8452602084019350602083019250506001810190506103fe565b5050509392505050565b600082601f83011261044a5761044961083d565b5b813561045a8482602086016103c5565b91505092915050565b60008135905061047281610862565b92915050565b60008151905061048781610862565b92915050565b6000602082840312156104a3576104a261084c565b5b60006104b184828501610463565b91505092915050565b6000602082840312156104d0576104cf61084c565b5b60006104de84828501610478565b91505092915050565b600080604083850312156104fe576104fd61084c565b5b600061050c85828601610463565b925050602083013567ffffffffffffffff81111561052d5761052c610847565b5b61053985828601610435565b9150509250929050565b600061054f83836105e6565b60208301905092915050565b61056481610765565b82525050565b60006105758261073c565b61057f8185610754565b935061058a8361072c565b8060005b838110156105bb5781516105a28882610543565b97506105ad83610747565b92505060018101905061058e565b5085935050505092915050565b6105d181610777565b82525050565b6105e081610781565b82525050565b6105ef816107af565b82525050565b6105fe816107af565b82525050565b61060d816107b9565b82525050565b61061c816107c9565b82525050565b6000604082019050610637600083018561055b565b610644602083018461055b565b9392505050565b60006020820190508181036000830152610665818461056a565b905092915050565b600060a08201905061068260008301886105c8565b61068f6020830187610613565b61069c60408301866105d7565b6106a96060830185610604565b6106b66080830184610604565b9695505050505050565b60006020820190506106d560008301846105f5565b92915050565b60006106e56106f6565b90506106f182826107dd565b919050565b6000604051905090565b600067ffffffffffffffff82111561071b5761071a61080e565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b60006107708261078f565b9050919050565b6000819050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b6107e682610851565b810181811067ffffffffffffffff821117156108055761080461080e565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61086b816107af565b811461087657600080fd5b5056fea264697066735822122020d61cbffef859b049c3b3b42af3beacaa4655c99e1a6ba0a167e971da1d050c64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "keyHash": "- the gas lane to use, which specifies the maximum gas price to bump to",
          "subscriptionId": "- the subscription ID that this contract uses for funding requests",
          "vrfCoordinator": "- coordinator, check https://docs.chain.link/docs/vrf-contracts/#configurations"
        }
      }
    },
    "title": "The RandomNumberConsumerV2 contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor inherits VRFConsumerBaseV2"
      },
      "requestRandomWords()": {
        "notice": "Requests randomness Assumes the subscription is funded sufficiently; \"Words\" refers to unit of data in Computer Science"
      }
    },
    "notice": "A contract that gets random values from Chainlink VRF V2",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3148,
        "contract": "contracts/test/RandomNumberConsumerV2.sol:RandomNumberConsumerV2",
        "label": "s_randomWords",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3150,
        "contract": "contracts/test/RandomNumberConsumerV2.sol:RandomNumberConsumerV2",
        "label": "s_requestId",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3152,
        "contract": "contracts/test/RandomNumberConsumerV2.sol:RandomNumberConsumerV2",
        "label": "s_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}