{
  "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_AVAILABLE_SUPPLY",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_MINT_COST",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_RAFFLE_BLOCKS_DURATION",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Minted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "ticketId",
          "type": "uint256"
        }
      ],
      "name": "TicketSold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AVAILABLE_SUPPLY",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CALLBACK_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_PER_ADDRESS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINT_COST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "NFTsId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RAFFLE_FINALIZATION_BLOCKNUMBER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WORDS_AMOUNT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_soldTicketsCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "buyTicket",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entropy",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNFTsIdLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSoldTickets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isRaffleOpen",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "participants",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "randomIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minted",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "ownedTickets",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proceedsClaimed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestRandomness",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRaffleProceeds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
<<<<<<< HEAD
  "transactionHash": "0xc9af7c3d2a6d93b4c604383627c842df61f0a1f9e86b7a881cb286464d0574e6",
=======
  "transactionHash": "0xe5a582bec6083cf77fdd5d931531f75fbb14402333de34e7d06ab617738cd3e4",
>>>>>>> d9129dd5c450a8f33fec746d898c727824f6f2f7
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
    "transactionIndex": 0,
    "gasUsed": "3853542",
    "logsBloom": "0x
<<<<<<< HEAD
    "blockHash": "0xc1885324fde551abfa5a9d871cee25f5b6418be30f034ca7e2b0d778f07a0d6e",
    "transactionHash": "0xc9af7c3d2a6d93b4c604383627c842df61f0a1f9e86b7a881cb286464d0574e6",
=======
    "blockHash": "0xaafb274cf549ce9421f2067fe17e6b997277d9d0eaedbced2a058767d74a1e64",
    "transactionHash": "0xe5a582bec6083cf77fdd5d931531f75fbb14402333de34e7d06ab617738cd3e4",
>>>>>>> d9129dd5c450a8f33fec746d898c727824f6f2f7
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 7,
<<<<<<< HEAD
        "transactionHash": "0xc9af7c3d2a6d93b4c604383627c842df61f0a1f9e86b7a881cb286464d0574e6",
=======
        "transactionHash": "0xe5a582bec6083cf77fdd5d931531f75fbb14402333de34e7d06ab617738cd3e4",
>>>>>>> d9129dd5c450a8f33fec746d898c727824f6f2f7
        "address": "0x0165878A594ca255338adfa4d48449f69242Eb8F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
<<<<<<< HEAD
        "blockHash": "0xc1885324fde551abfa5a9d871cee25f5b6418be30f034ca7e2b0d778f07a0d6e"
=======
        "blockHash": "0xaafb274cf549ce9421f2067fe17e6b997277d9d0eaedbced2a058767d74a1e64"
>>>>>>> d9129dd5c450a8f33fec746d898c727824f6f2f7
      }
    ],
    "blockNumber": 7,
    "cumulativeGasUsed": "3853542",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "1",
    1,
    "100000000000000000",
    1000
  ],
  "numDeployments": 1,
<<<<<<< HEAD
  "solcInputHash": "49da93177a0edbba5634abd7bd0871c9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_AVAILABLE_SUPPLY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MINT_COST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_RAFFLE_BLOCKS_DURATION\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"TicketSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AVAILABLE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLBACK_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_ADDRESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTsId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAFFLE_FINALIZATION_BLOCKNUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WORDS_AMOUNT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entropy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTsIdLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSoldTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRaffleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownedTickets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proceedsClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRaffleProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Rloot\",\"events\":{\"Minted(address,uint256)\":{\"params\":{\"tokenId\":\"Number of the ticket sold\",\"user\":\"Address of raffle participant\"}},\"TicketSold(address,uint256)\":{\"params\":{\"ticketId\":\"Number of the ticket sold\",\"user\":\"Address of raffle participant\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"_AVAILABLE_SUPPLY\":\"total NFTs to sell\",\"_MINT_COST\":\"in wei per ticket\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ShuffleOne\",\"version\":1},\"userdoc\":{\"events\":{\"Minted(address,uint256)\":{\"notice\":\"Emitted after a successful mint \"},\"TicketSold(address,uint256)\":{\"notice\":\"Emitted after a successful ticket sell \"}},\"kind\":\"user\",\"methods\":{\"AVAILABLE_SUPPLY()\":{\"notice\":\"Avalible NFTs to be minted\"},\"MAX_PER_ADDRESS()\":{\"notice\":\"Maximum tickets per address\"},\"MINT_COST()\":{\"notice\":\"Minimum cost for ticket\"},\"NFTsId(uint256)\":{\"notice\":\"Array of NFTs ID to be minted \"},\"RAFFLE_FINALIZATION_BLOCKNUMBER()\":{\"notice\":\"Blocknumber raffle ends at.\"},\"buyTicket()\":{\"notice\":\"Enters raffle \"},\"constructor\":{\"notice\":\"Creates a new NFT distribution contract\"},\"entropy()\":{\"notice\":\"Source of entropy\"},\"getNFTsIdLength()\":{\"notice\":\"Get the lengths of the NFTsIds array\"},\"getSoldTickets()\":{\"notice\":\"Get total numbers of tickets sold \"},\"mint()\":{\"notice\":\"Generate rand index for the NFTid, mint NFT and remove it from array \"},\"participants(address)\":{\"notice\":\"Keep track of participants \"},\"proceedsClaimed()\":{\"notice\":\"Owner has claimed raffle proceeds\"},\"withdrawRaffleProceeds()\":{\"notice\":\"Allows contract owner to withdraw proceeds of tickets\"}},\"notice\":\"ERC721 randomized distribution\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ShuffleOne.sol\":\"ShuffleOne\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address internal immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x60507c8bfa96d46e2a7fdd98a3e67378e83833b114a669aeaaea35c6cd1894ab\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ShuffleOne.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/// ============ Imports ============\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\"; //OZ: ERC721\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\"; // OZ: Ownership\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\"; //OZ: Counter\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\n/// @title ShuffleOne\\n/// @author Rloot\\n/// @notice ERC721 randomized distribution\\ncontract ShuffleOne is VRFConsumerBaseV2, ERC721, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    /// ============ Structs ============\\n    \\n    /// @notice Users participants data\\n    struct Participant {\\n        // NFT token ID granted to be mint\\n        uint256 tokenId;\\n        // Index used to select token id\\n        uint256 randomIndex;\\n        // Number minted tokens\\n        uint256 minted;\\n        // Count of tickets bought\\n        uint256 ownedTickets; \\n    }\\n\\n    /// ============ Immutable storage ============\\n\\n    /// @notice Blocknumber raffle ends at.\\n    uint256 public immutable RAFFLE_FINALIZATION_BLOCKNUMBER;\\n    /// @notice Avalible NFTs to be minted\\n    uint256 public immutable AVAILABLE_SUPPLY;\\n    /// @notice Minimum cost for ticket\\n    uint256 public immutable MINT_COST;\\n    /// @notice Maximum tickets per address\\n    uint256 public immutable MAX_PER_ADDRESS = 1;\\n\\n    /// ============ Mutable storage ============\\n\\n    /// @notice Keep track of participants \\n    mapping (address => Participant) public participants;\\n    /// @notice Array of NFTs ID to be minted \\n    uint256[] public NFTsId;\\n    /// @notice Source of entropy\\n    uint256 public entropy;\\n    /// @notice Owner has claimed raffle proceeds\\n    bool public proceedsClaimed = false;\\n\\n    /// @notice Keeps track of sold tickets \\n    Counters.Counter internal _soldTicketsCounter;\\n\\n    // VRF v2\\n    bytes32 internal immutable _keyHash;\\n    uint64 internal immutable _subId;\\n    \\n    uint256 internal _requestId;\\n\\n    uint16 public constant MINIMUM_CONFIRMATIONS = 3;\\n    uint32 public constant CALLBACK_GAS_LIMIT = 1_200_000;\\n    uint32 public constant WORDS_AMOUNT = 10;\\n\\n    /// ============ Events ============\\n\\n    /// @notice Emitted after a successful ticket sell \\n    /// @param user Address of raffle participant\\n    /// @param ticketId Number of the ticket sold\\n    event TicketSold(address indexed user, uint256 ticketId);\\n\\n    /// @notice Emitted after a successful mint \\n    /// @param user Address of raffle participant\\n    /// @param tokenId Number of the ticket sold\\n    event Minted(address indexed user, uint256 tokenId);\\n\\n    /// ============ Constructor ============\\n\\n    /// @notice Creates a new NFT distribution contract\\n    /// @param _AVAILABLE_SUPPLY total NFTs to sell\\n    /// @param _MINT_COST in wei per ticket\\n    constructor(\\n        address vrfCoordinator,\\n        bytes32 keyHash,\\n        uint64 subId,\\n        uint256 _AVAILABLE_SUPPLY,\\n        uint256 _MINT_COST,\\n        uint256 _RAFFLE_BLOCKS_DURATION\\n    )\\n        ERC721(\\\"Random NFT\\\", \\\"rNFT\\\")\\n        VRFConsumerBaseV2(vrfCoordinator)\\n    {\\n        AVAILABLE_SUPPLY = _AVAILABLE_SUPPLY;\\n        MINT_COST = _MINT_COST;\\n        RAFFLE_FINALIZATION_BLOCKNUMBER = block.number + _RAFFLE_BLOCKS_DURATION; \\n\\n        _keyHash = keyHash;\\n        _subId = subId;\\n    }\\n\\n    /// ============ Functions ============\\n\\n    /// @notice Enters raffle \\n    function buyTicket() external payable {\\n        // Ensure there are tickets to be sell\\n        require(_soldTicketsCounter.current() < AVAILABLE_SUPPLY, \\\"All tickets sold\\\");\\n        // Ensure participant owns no more than allow\\n        require(participants[msg.sender].ownedTickets < MAX_PER_ADDRESS, \\\"Address owns ticket\\\");\\n        // Ensure sufficient raffle ticket payment\\n        require(msg.value >= MINT_COST, \\\"Insufficient payment\\\");\\n        // Ensure raffle is open\\n        require(block.number <= RAFFLE_FINALIZATION_BLOCKNUMBER, \\\"Raffle has ended\\\");\\n\\n        // Participant gets ticket\\n        participants[msg.sender].ownedTickets++;\\n        \\n        // Total sold tickets counter updated\\n        _soldTicketsCounter.increment();\\n\\n        // Add NFT ID to be minted\\n        NFTsId.push(_soldTicketsCounter.current()); \\n        \\n        // Emmit succesfull entry\\n        emit TicketSold(msg.sender, _soldTicketsCounter.current());\\n    }\\n\\n    function requestRandomness() external {\\n        require(_requestId == 0, 'random already requested');\\n        require(isRaffleOpen(), \\\"Raffle still open\\\");\\n\\n        _requestId = VRFCoordinatorV2Interface(vrfCoordinator).requestRandomWords(\\n            _keyHash, _subId, MINIMUM_CONFIRMATIONS, CALLBACK_GAS_LIMIT, WORDS_AMOUNT\\n        );\\n    }\\n\\n    function getRequestId() external view returns(uint256) {\\n        return _requestId;\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        // verify requestId\\n        require(_requestId == requestId, \\\"requestId do not match\\\");\\n        require(entropy == 0, \\\"entropy already set\\\");\\n        // set entropy\\n        entropy = randomWords[0];\\n    }\\n\\n\\n    /// @notice Generate rand index for the NFTid, mint NFT and remove it from array \\n    function mint() public {\\n        // Ensure participant owns ticket\\n        require(participants[msg.sender].ownedTickets > 0, \\\"Address does not own a ticket\\\");\\n        // Ensure minted amount < max allow\\n        require(participants[msg.sender].minted < MAX_PER_ADDRESS, \\\"Max allow per address minted\\\");\\n        // Ensure raffle is closed\\n        require(isRaffleOpen(), \\\"Raffle still open\\\");\\n        // Ensure entropy is set\\n        require(entropy != 0, \\\"Entropy is not set\\\");\\n\\n        // Pick index from NFTsIds\\n        uint256 randomIndex = getRandomIndex();\\n        \\n        // Get random ID value from NFTsIds\\n        uint256 randomNFTsId = NFTsId[randomIndex];\\n\\n        // Mint random NFT\\n        _mint(msg.sender, randomNFTsId);\\n\\n        // Remove minted ID from NFTsIds array\\n        removeIndexFromArray(randomIndex);\\n        // Update participants data\\n        participants[msg.sender].randomIndex = randomIndex;\\n        participants[msg.sender].tokenId = randomNFTsId;\\n        participants[msg.sender].ownedTickets--;\\n        participants[msg.sender].minted++;\\n\\n        // Emit minted NFT\\n        emit Minted(msg.sender, randomNFTsId);\\n    }\\n\\n    /// @notice Get a random index from the NFTsId array \\n    function getRandomIndex() internal view returns (uint) {\\n        // Picks a random index between 0 and NFTsIDs length\\n        return entropy % NFTsId.length;\\n    }\\n\\n    /// @notice Delete minted id from array, gas efficient, no re-ordering of indexs\\n    /// @param index element to be deleted from NFTsId after bein minted\\n    function removeIndexFromArray(uint index) internal {\\n        // Ensure to avoid removing and not existing index\\n        require(index < NFTsId.length);\\n\\n        // Move the last element to the index of the deleted one \\n        NFTsId[index] = NFTsId[NFTsId.length-1];\\n\\n        // Remove last element\\n        NFTsId.pop();\\n    }\\n\\n    /// @notice Get the lengths of the NFTsIds array\\n    function getNFTsIdLength() public view returns (uint256) {\\n        return NFTsId.length;\\n    }\\n\\n    /// @notice Get total numbers of tickets sold \\n    function getSoldTickets() public view returns (uint256) {\\n        return _soldTicketsCounter.current();\\n    }\\n\\n    /// @notice Allows contract owner to withdraw proceeds of tickets\\n    function withdrawRaffleProceeds() external onlyOwner {\\n        // Ensure raffle has ended\\n        require(isRaffleOpen(), \\\"Raffle still open\\\");        // Ensure proceeds have not already been claimed\\n        require(!proceedsClaimed, \\\"Proceeds already claimed\\\");\\n\\n        // Toggle proceeds being claimed\\n        proceedsClaimed = true;\\n\\n        // Pay owner proceeds\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\"); \\n        require(sent, \\\"Unsuccessful in payout\\\");\\n    }\\n\\n    // @Notice overrides base url\\n    function _baseURI() internal view override virtual returns (string memory) {\\n        return \\\"https://ipfs.io/ipfs/QmQxDjEhnYP6QAtLRyLV9N7dn1kDigz7iWnx5psmyXqy35/\\\";\\n    }\\n\\n    function isRaffleOpen() public view returns (bool) {\\n        if (\\n            _soldTicketsCounter.current() == AVAILABLE_SUPPLY || \\n            block.number >= RAFFLE_FINALIZATION_BLOCKNUMBER\\n        ) { \\n            return true; \\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x37cec3c805c6a5884d0ca4b9371b3e29cf60505dd6625d3dd3a40d214359596d\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6101606040526001610100908152506000600a60006101000a81548160ff0219169083151502179055503480156200003657600080fd5b50604051620049a6380380620049a683398181016040528101906200005c919062000389565b6040518060400160405280600a81526020017f52616e646f6d204e4654000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f724e465400000000000000000000000000000000000000000000000000000000815250878073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508160009080519060200190620001199291906200027d565b508060019080519060200190620001329291906200027d565b5050506200015562000149620001af60201b60201c565b620001b760201b60201c565b8260c081815250508160e08181525050804362000173919062000425565b60a081815250508461012081815250508367ffffffffffffffff166101408167ffffffffffffffff1660c01b81525050505050505050620005df565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200028b90620004de565b90600052602060002090601f016020900481019282620002af5760008555620002fb565b82601f10620002ca57805160ff1916838001178555620002fb565b82800160010185558215620002fb579182015b82811115620002fa578251825591602001919060010190620002dd565b5b5090506200030a91906200030e565b5090565b5b80821115620003295760008160009055506001016200030f565b5090565b6000815190506200033e8162000577565b92915050565b600081519050620003558162000591565b92915050565b6000815190506200036c81620005ab565b92915050565b6000815190506200038381620005c5565b92915050565b60008060008060008060c08789031215620003a957620003a862000572565b5b6000620003b989828a016200032d565b9650506020620003cc89828a0162000344565b9550506040620003df89828a0162000372565b9450506060620003f289828a016200035b565b93505060806200040589828a016200035b565b92505060a06200041889828a016200035b565b9150509295509295509295565b60006200043282620004c0565b91506200043f83620004c0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000477576200047662000514565b5b828201905092915050565b60006200048f82620004a0565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006002820490506001821680620004f757607f821691505b602082108114156200050e576200050d62000543565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b620005828162000482565b81146200058e57600080fd5b50565b6200059c8162000496565b8114620005a857600080fd5b50565b620005b681620004c0565b8114620005c257600080fd5b50565b620005d081620004ca565b8114620005dc57600080fd5b50565b60805160601c60a05160c05160e05161010051610120516101405160c01c6143276200067f6000396000611abb01526000611a9a015260008181610bb101528181610c5a01526116f7015260008181611536015261179b01526000818161091a015281816114b0015261168c01526000818161094c015281816115d401526117fe015260008181610f5d01528181610fb10152611a5e01526143276000f3fe60806040526004361061020f5760003560e01c80636352211e11610118578063c662e481116100a0578063e6f8bff71161006f578063e6f8bff714610782578063e985e9c5146107ad578063edca914c146107ea578063f2fde38b146107f4578063f8413b071461081d5761020f565b8063c662e481146106c4578063c87b56dd146106ef578063d089adc71461072c578063d60ed9a8146107575761020f565b80638da5cb5b116100e75780638da5cb5b146105f157806395d89b411461061c578063a22cb46514610647578063b438e12e14610670578063b88d4fde1461069b5761020f565b80636352211e1461052357806370a0823114610560578063715018a61461059d5780637885142d146105b45761020f565b80631fe543e31161019b57806342842e0e1161016a57806342842e0e146104625780634694ad9c1461048b57806347ce07cc146104b657806355003593146104e15780635bc46074146104f85761020f565b80631fe543e3146103ba57806323b872dd146103e35780632aa51bdf1461040c57806333d608f1146104375761020f565b8063081812fc116101e2578063081812fc146102d2578063095ea7b31461030f57806309e69ede146103385780630aaef285146103785780631249c58b146103a35761020f565b806301ffc9a714610214578063060cb05d1461025157806306fdde031461027c578063077001b9146102a7575b600080fd5b34801561022057600080fd5b5061023b60048036038101906102369190612d30565b610834565b60405161024891906133c6565b60405180910390f35b34801561025d57600080fd5b50610266610916565b60405161027391906133c6565b60405180910390f35b34801561028857600080fd5b50610291610985565b60405161029e9190613434565b60405180910390f35b3480156102b357600080fd5b506102bc610a17565b6040516102c991906137b1565b60405180910390f35b3480156102de57600080fd5b506102f960048036038101906102f49190612d8a565b610a21565b6040516103069190613336565b60405180910390f35b34801561031b57600080fd5b5061033660048036038101906103319190612cf0565b610a67565b005b34801561034457600080fd5b5061035f600480360381019061035a9190612b6d565b610b7f565b60405161036f94939291906137cc565b60405180910390f35b34801561038457600080fd5b5061038d610baf565b60405161039a91906137b1565b60405180910390f35b3480156103af57600080fd5b506103b8610bd3565b005b3480156103c657600080fd5b506103e160048036038101906103dc9190612de4565b610f5b565b005b3480156103ef57600080fd5b5061040a60048036038101906104059190612bda565b61101b565b005b34801561041857600080fd5b5061042161107b565b60405161042e91906137b1565b60405180910390f35b34801561044357600080fd5b5061044c61108c565b6040516104599190613811565b60405180910390f35b34801561046e57600080fd5b5061048960048036038101906104849190612bda565b611093565b005b34801561049757600080fd5b506104a06110b3565b6040516104ad9190613811565b60405180910390f35b3480156104c257600080fd5b506104cb6110b8565b6040516104d891906137b1565b60405180910390f35b3480156104ed57600080fd5b506104f66110be565b005b34801561050457600080fd5b5061050d611227565b60405161051a91906133c6565b60405180910390f35b34801561052f57600080fd5b5061054a60048036038101906105459190612d8a565b61123a565b6040516105579190613336565b60405180910390f35b34801561056c57600080fd5b5061058760048036038101906105829190612b6d565b6112ec565b60405161059491906137b1565b60405180910390f35b3480156105a957600080fd5b506105b26113a4565b005b3480156105c057600080fd5b506105db60048036038101906105d69190612d8a565b6113b8565b6040516105e891906137b1565b60405180910390f35b3480156105fd57600080fd5b506106066113dc565b6040516106139190613336565b60405180910390f35b34801561062857600080fd5b50610631611406565b60405161063e9190613434565b60405180910390f35b34801561065357600080fd5b5061066e60048036038101906106699190612cb0565b611498565b005b34801561067c57600080fd5b506106856114ae565b60405161069291906137b1565b60405180910390f35b3480156106a757600080fd5b506106c260048036038101906106bd9190612c2d565b6114d2565b005b3480156106d057600080fd5b506106d9611534565b6040516106e691906137b1565b60405180910390f35b3480156106fb57600080fd5b5061071660048036038101906107119190612d8a565b611558565b6040516107239190613434565b60405180910390f35b34801561073857600080fd5b506107416115c0565b60405161074e9190613796565b60405180910390f35b34801561076357600080fd5b5061076c6115c5565b60405161077991906137b1565b60405180910390f35b34801561078e57600080fd5b506107976115d2565b6040516107a491906137b1565b60405180910390f35b3480156107b957600080fd5b506107d460048036038101906107cf9190612b9a565b6115f6565b6040516107e191906133c6565b60405180910390f35b6107f261168a565b005b34801561080057600080fd5b5061081b60048036038101906108169190612b6d565b61194c565b005b34801561082957600080fd5b506108326119d0565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108ff57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061090f575061090e82611b5c565b5b9050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000610943600b611bc6565b148061096f57507f00000000000000000000000000000000000000000000000000000000000000004310155b1561097d5760019050610982565b600090505b90565b60606000805461099490613ad3565b80601f01602080910402602001604051908101604052809291908181526020018280546109c090613ad3565b8015610a0d5780601f106109e257610100808354040283529160200191610a0d565b820191906000526020600020905b8154815290600101906020018083116109f057829003601f168201915b5050505050905090565b6000600c54905090565b6000610a2c82611bd4565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a728261123a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ada90613736565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b02611c1f565b73ffffffffffffffffffffffffffffffffffffffff161480610b315750610b3081610b2b611c1f565b6115f6565b5b610b70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6790613676565b60405180910390fd5b610b7a8383611c27565b505050565b60076020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015411610c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4f90613556565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015410610cfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf390613756565b60405180910390fd5b610d04610916565b610d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3a90613576565b60405180910390fd5b60006009541415610d89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d80906135f6565b60405180910390fd5b6000610d93611ce0565b9050600060088281548110610dab57610daa613c6c565b5b90600052602060002001549050610dc23382611cfa565b610dcb82611ed4565b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000815480929190610eac90613aa9565b9190505550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000815480929190610f0490613b36565b91905055503373ffffffffffffffffffffffffffffffffffffffff167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe82604051610f4f91906137b1565b60405180910390a25050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461100d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401611004929190613351565b60405180910390fd5b6110178282611f62565b5050565b61102c611026611c1f565b82612011565b61106b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106290613776565b60405180910390fd5b6110768383836120a6565b505050565b6000611087600b611bc6565b905090565b62124f8081565b6110ae838383604051806020016040528060008152506114d2565b505050565b600a81565b60095481565b6110c661230d565b6110ce610916565b61110d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110490613576565b60405180910390fd5b600a60009054906101000a900460ff161561115d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115490613476565b60405180910390fd5b6001600a60006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff164760405161119e90613321565b60006040518083038185875af1925050503d80600081146111db576040519150601f19603f3d011682016040523d82523d6000602084013e6111e0565b606091505b5050905080611224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121b90613496565b60405180910390fd5b50565b600a60009054906101000a900460ff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112da90613716565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561135d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135490613656565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6113ac61230d565b6113b6600061238b565b565b600881815481106113c857600080fd5b906000526020600020016000915090505481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461141590613ad3565b80601f016020809104026020016040519081016040528092919081815260200182805461144190613ad3565b801561148e5780601f106114635761010080835404028352916020019161148e565b820191906000526020600020905b81548152906001019060200180831161147157829003601f168201915b5050505050905090565b6114aa6114a3611c1f565b8383612451565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6114e36114dd611c1f565b83612011565b611522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151990613776565b60405180910390fd5b61152e848484846125be565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606061156382611bd4565b600061156d61261a565b9050600081511161158d57604051806020016040528060008152506115b8565b806115978461263a565b6040516020016115a89291906132fd565b6040516020818303038152906040525b915050919050565b600381565b6000600880549050905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f00000000000000000000000000000000000000000000000000000000000000006116b5600b611bc6565b106116f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ec906136b6565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015410611799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179090613616565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000003410156117fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f3906136d6565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000043111561185f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611856906135d6565b60405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008154809291906118b290613b36565b91905055506118c1600b61279b565b60086118cd600b611bc6565b90806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff167f8ef92257fbc070823c8bb4051ff3a58b831946d893fbb1bfd9bc77b87ff77d09611935600b611bc6565b60405161194291906137b1565b60405180910390a2565b61195461230d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bb906134d6565b60405180910390fd5b6119cd8161238b565b50565b6000600c5414611a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0c90613456565b60405180910390fd5b611a1d610916565b611a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5390613576565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600362124f80600a6040518663ffffffff1660e01b8152600401611b029594939291906133e1565b602060405180830381600087803b158015611b1c57600080fd5b505af1158015611b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b549190612db7565b600c81905550565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600081600001549050919050565b611bdd816127b1565b611c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1390613716565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c9a8361123a565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600880549050600954611cf59190613b7f565b905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6190613696565b60405180910390fd5b611d73816127b1565b15611db3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611daa90613516565b60405180910390fd5b611dbf6000838361281d565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e0f91906138fc565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ed060008383612822565b5050565b6008805490508110611ee557600080fd5b60086001600880549050611ef99190613983565b81548110611f0a57611f09613c6c565b5b906000526020600020015460088281548110611f2957611f28613c6c565b5b90600052602060002001819055506008805480611f4957611f48613c3d565b5b6001900381819060005260206000200160009055905550565b81600c5414611fa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9d90613636565b60405180910390fd5b600060095414611feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe290613536565b60405180910390fd5b80600081518110611fff57611ffe613c6c565b5b60200260200101516009819055505050565b60008061201d8361123a565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061205f575061205e81856115f6565b5b8061209d57508373ffffffffffffffffffffffffffffffffffffffff1661208584610a21565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166120c68261123a565b73ffffffffffffffffffffffffffffffffffffffff161461211c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612113906134f6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561218c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218390613596565b60405180910390fd5b61219783838361281d565b6121a2600082611c27565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121f29190613983565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461224991906138fc565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612308838383612822565b505050565b612315611c1f565b73ffffffffffffffffffffffffffffffffffffffff166123336113dc565b73ffffffffffffffffffffffffffffffffffffffff1614612389576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612380906136f6565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156124c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124b7906135b6565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516125b191906133c6565b60405180910390a3505050565b6125c98484846120a6565b6125d584848484612827565b612614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260b906134b6565b60405180910390fd5b50505050565b60606040518060800160405280604481526020016142ae60449139905090565b60606000821415612682576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612796565b600082905060005b600082146126b457808061269d90613b36565b915050600a826126ad9190613952565b915061268a565b60008167ffffffffffffffff8111156126d0576126cf613c9b565b5b6040519080825280601f01601f1916602001820160405280156127025781602001600182028036833780820191505090505b5090505b6000851461278f5760018261271b9190613983565b9150600a8561272a9190613b7f565b603061273691906138fc565b60f81b81838151811061274c5761274b613c6c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856127889190613952565b9450612706565b8093505050505b919050565b6001816000016000828254019250508190555050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006128488473ffffffffffffffffffffffffffffffffffffffff166129be565b156129b1578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612871611c1f565b8786866040518563ffffffff1660e01b8152600401612893949392919061337a565b602060405180830381600087803b1580156128ad57600080fd5b505af19250505080156128de57506040513d601f19601f820116820180604052508101906128db9190612d5d565b60015b612961573d806000811461290e576040519150601f19603f3d011682016040523d82523d6000602084013e612913565b606091505b50600081511415612959576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612950906134b6565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506129b6565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006129f46129ef84613851565b61382c565b90508083825260208201905082856020860282011115612a1757612a16613ccf565b5b60005b85811015612a475781612a2d8882612b43565b845260208401935060208301925050600181019050612a1a565b5050509392505050565b6000612a64612a5f8461387d565b61382c565b905082815260208101848484011115612a8057612a7f613cd4565b5b612a8b848285613a67565b509392505050565b600081359050612aa281614251565b92915050565b600082601f830112612abd57612abc613cca565b5b8135612acd8482602086016129e1565b91505092915050565b600081359050612ae581614268565b92915050565b600081359050612afa8161427f565b92915050565b600081519050612b0f8161427f565b92915050565b600082601f830112612b2a57612b29613cca565b5b8135612b3a848260208601612a51565b91505092915050565b600081359050612b5281614296565b92915050565b600081519050612b6781614296565b92915050565b600060208284031215612b8357612b82613cde565b5b6000612b9184828501612a93565b91505092915050565b60008060408385031215612bb157612bb0613cde565b5b6000612bbf85828601612a93565b9250506020612bd085828601612a93565b9150509250929050565b600080600060608486031215612bf357612bf2613cde565b5b6000612c0186828701612a93565b9350506020612c1286828701612a93565b9250506040612c2386828701612b43565b9150509250925092565b60008060008060808587031215612c4757612c46613cde565b5b6000612c5587828801612a93565b9450506020612c6687828801612a93565b9350506040612c7787828801612b43565b925050606085013567ffffffffffffffff811115612c9857612c97613cd9565b5b612ca487828801612b15565b91505092959194509250565b60008060408385031215612cc757612cc6613cde565b5b6000612cd585828601612a93565b9250506020612ce685828601612ad6565b9150509250929050565b60008060408385031215612d0757612d06613cde565b5b6000612d1585828601612a93565b9250506020612d2685828601612b43565b9150509250929050565b600060208284031215612d4657612d45613cde565b5b6000612d5484828501612aeb565b91505092915050565b600060208284031215612d7357612d72613cde565b5b6000612d8184828501612b00565b91505092915050565b600060208284031215612da057612d9f613cde565b5b6000612dae84828501612b43565b91505092915050565b600060208284031215612dcd57612dcc613cde565b5b6000612ddb84828501612b58565b91505092915050565b60008060408385031215612dfb57612dfa613cde565b5b6000612e0985828601612b43565b925050602083013567ffffffffffffffff811115612e2a57612e29613cd9565b5b612e3685828601612aa8565b9150509250929050565b612e49816139b7565b82525050565b612e58816139c9565b82525050565b612e67816139d5565b82525050565b6000612e78826138ae565b612e8281856138c4565b9350612e92818560208601613a76565b612e9b81613ce3565b840191505092915050565b6000612eb1826138b9565b612ebb81856138e0565b9350612ecb818560208601613a76565b612ed481613ce3565b840191505092915050565b6000612eea826138b9565b612ef481856138f1565b9350612f04818560208601613a76565b80840191505092915050565b6000612f1d6018836138e0565b9150612f2882613cf4565b602082019050919050565b6000612f406018836138e0565b9150612f4b82613d1d565b602082019050919050565b6000612f636016836138e0565b9150612f6e82613d46565b602082019050919050565b6000612f866032836138e0565b9150612f9182613d6f565b604082019050919050565b6000612fa96026836138e0565b9150612fb482613dbe565b604082019050919050565b6000612fcc6025836138e0565b9150612fd782613e0d565b604082019050919050565b6000612fef601c836138e0565b9150612ffa82613e5c565b602082019050919050565b60006130126013836138e0565b915061301d82613e85565b602082019050919050565b6000613035601d836138e0565b915061304082613eae565b602082019050919050565b60006130586011836138e0565b915061306382613ed7565b602082019050919050565b600061307b6024836138e0565b915061308682613f00565b604082019050919050565b600061309e6019836138e0565b91506130a982613f4f565b602082019050919050565b60006130c16010836138e0565b91506130cc82613f78565b602082019050919050565b60006130e46012836138e0565b91506130ef82613fa1565b602082019050919050565b60006131076013836138e0565b915061311282613fca565b602082019050919050565b600061312a6016836138e0565b915061313582613ff3565b602082019050919050565b600061314d6029836138e0565b91506131588261401c565b604082019050919050565b6000613170603e836138e0565b915061317b8261406b565b604082019050919050565b60006131936020836138e0565b915061319e826140ba565b602082019050919050565b60006131b66010836138e0565b91506131c1826140e3565b602082019050919050565b60006131d96014836138e0565b91506131e48261410c565b602082019050919050565b60006131fc6020836138e0565b915061320782614135565b602082019050919050565b600061321f6018836138e0565b915061322a8261415e565b602082019050919050565b60006132426021836138e0565b915061324d82614187565b604082019050919050565b60006132656000836138d5565b9150613270826141d6565b600082019050919050565b6000613288601c836138e0565b9150613293826141d9565b602082019050919050565b60006132ab602e836138e0565b91506132b682614202565b604082019050919050565b6132ca81613a0b565b82525050565b6132d981613a39565b82525050565b6132e881613a43565b82525050565b6132f781613a53565b82525050565b60006133098285612edf565b91506133158284612edf565b91508190509392505050565b600061332c82613258565b9150819050919050565b600060208201905061334b6000830184612e40565b92915050565b60006040820190506133666000830185612e40565b6133736020830184612e40565b9392505050565b600060808201905061338f6000830187612e40565b61339c6020830186612e40565b6133a960408301856132d0565b81810360608301526133bb8184612e6d565b905095945050505050565b60006020820190506133db6000830184612e4f565b92915050565b600060a0820190506133f66000830188612e5e565b61340360208301876132ee565b61341060408301866132c1565b61341d60608301856132df565b61342a60808301846132df565b9695505050505050565b6000602082019050818103600083015261344e8184612ea6565b905092915050565b6000602082019050818103600083015261346f81612f10565b9050919050565b6000602082019050818103600083015261348f81612f33565b9050919050565b600060208201905081810360008301526134af81612f56565b9050919050565b600060208201905081810360008301526134cf81612f79565b9050919050565b600060208201905081810360008301526134ef81612f9c565b9050919050565b6000602082019050818103600083015261350f81612fbf565b9050919050565b6000602082019050818103600083015261352f81612fe2565b9050919050565b6000602082019050818103600083015261354f81613005565b9050919050565b6000602082019050818103600083015261356f81613028565b9050919050565b6000602082019050818103600083015261358f8161304b565b9050919050565b600060208201905081810360008301526135af8161306e565b9050919050565b600060208201905081810360008301526135cf81613091565b9050919050565b600060208201905081810360008301526135ef816130b4565b9050919050565b6000602082019050818103600083015261360f816130d7565b9050919050565b6000602082019050818103600083015261362f816130fa565b9050919050565b6000602082019050818103600083015261364f8161311d565b9050919050565b6000602082019050818103600083015261366f81613140565b9050919050565b6000602082019050818103600083015261368f81613163565b9050919050565b600060208201905081810360008301526136af81613186565b9050919050565b600060208201905081810360008301526136cf816131a9565b9050919050565b600060208201905081810360008301526136ef816131cc565b9050919050565b6000602082019050818103600083015261370f816131ef565b9050919050565b6000602082019050818103600083015261372f81613212565b9050919050565b6000602082019050818103600083015261374f81613235565b9050919050565b6000602082019050818103600083015261376f8161327b565b9050919050565b6000602082019050818103600083015261378f8161329e565b9050919050565b60006020820190506137ab60008301846132c1565b92915050565b60006020820190506137c660008301846132d0565b92915050565b60006080820190506137e160008301876132d0565b6137ee60208301866132d0565b6137fb60408301856132d0565b61380860608301846132d0565b95945050505050565b600060208201905061382660008301846132df565b92915050565b6000613836613847565b90506138428282613b05565b919050565b6000604051905090565b600067ffffffffffffffff82111561386c5761386b613c9b565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561389857613897613c9b565b5b6138a182613ce3565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061390782613a39565b915061391283613a39565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561394757613946613bb0565b5b828201905092915050565b600061395d82613a39565b915061396883613a39565b92508261397857613977613bdf565b5b828204905092915050565b600061398e82613a39565b915061399983613a39565b9250828210156139ac576139ab613bb0565b5b828203905092915050565b60006139c282613a19565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015613a94578082015181840152602081019050613a79565b83811115613aa3576000848401525b50505050565b6000613ab482613a39565b91506000821415613ac857613ac7613bb0565b5b600182039050919050565b60006002820490506001821680613aeb57607f821691505b60208210811415613aff57613afe613c0e565b5b50919050565b613b0e82613ce3565b810181811067ffffffffffffffff82111715613b2d57613b2c613c9b565b5b80604052505050565b6000613b4182613a39565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b7457613b73613bb0565b5b600182019050919050565b6000613b8a82613a39565b9150613b9583613a39565b925082613ba557613ba4613bdf565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f72616e646f6d20616c7265616479207265717565737465640000000000000000600082015250565b7f50726f636565647320616c726561647920636c61696d65640000000000000000600082015250565b7f556e7375636365737366756c20696e207061796f757400000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f656e74726f707920616c72656164792073657400000000000000000000000000600082015250565b7f4164647265737320646f6573206e6f74206f776e2061207469636b6574000000600082015250565b7f526166666c65207374696c6c206f70656e000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f526166666c652068617320656e64656400000000000000000000000000000000600082015250565b7f456e74726f7079206973206e6f74207365740000000000000000000000000000600082015250565b7f41646472657373206f776e73207469636b657400000000000000000000000000600082015250565b7f72657175657374496420646f206e6f74206d6174636800000000000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f416c6c207469636b65747320736f6c6400000000000000000000000000000000600082015250565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4d617820616c6c6f77207065722061646472657373206d696e74656400000000600082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b61425a816139b7565b811461426557600080fd5b50565b614271816139c9565b811461427c57600080fd5b50565b614288816139df565b811461429357600080fd5b50565b61429f81613a39565b81146142aa57600080fd5b5056fe68747470733a2f2f697066732e696f2f697066732f516d5178446a45686e5950365141744c52794c56394e37646e316b4469677a3769576e783570736d7958717933352fa26469706673582212209f0c91474c5c68a1ec54ba6e52738a4c72d9d7a704fd6e4dc593ed234d5db5c764736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061020f5760003560e01c80636352211e11610118578063c662e481116100a0578063e6f8bff71161006f578063e6f8bff714610782578063e985e9c5146107ad578063edca914c146107ea578063f2fde38b146107f4578063f8413b071461081d5761020f565b8063c662e481146106c4578063c87b56dd146106ef578063d089adc71461072c578063d60ed9a8146107575761020f565b80638da5cb5b116100e75780638da5cb5b146105f157806395d89b411461061c578063a22cb46514610647578063b438e12e14610670578063b88d4fde1461069b5761020f565b80636352211e1461052357806370a0823114610560578063715018a61461059d5780637885142d146105b45761020f565b80631fe543e31161019b57806342842e0e1161016a57806342842e0e146104625780634694ad9c1461048b57806347ce07cc146104b657806355003593146104e15780635bc46074146104f85761020f565b80631fe543e3146103ba57806323b872dd146103e35780632aa51bdf1461040c57806333d608f1146104375761020f565b8063081812fc116101e2578063081812fc146102d2578063095ea7b31461030f57806309e69ede146103385780630aaef285146103785780631249c58b146103a35761020f565b806301ffc9a714610214578063060cb05d1461025157806306fdde031461027c578063077001b9146102a7575b600080fd5b34801561022057600080fd5b5061023b60048036038101906102369190612d30565b610834565b60405161024891906133c6565b60405180910390f35b34801561025d57600080fd5b50610266610916565b60405161027391906133c6565b60405180910390f35b34801561028857600080fd5b50610291610985565b60405161029e9190613434565b60405180910390f35b3480156102b357600080fd5b506102bc610a17565b6040516102c991906137b1565b60405180910390f35b3480156102de57600080fd5b506102f960048036038101906102f49190612d8a565b610a21565b6040516103069190613336565b60405180910390f35b34801561031b57600080fd5b5061033660048036038101906103319190612cf0565b610a67565b005b34801561034457600080fd5b5061035f600480360381019061035a9190612b6d565b610b7f565b60405161036f94939291906137cc565b60405180910390f35b34801561038457600080fd5b5061038d610baf565b60405161039a91906137b1565b60405180910390f35b3480156103af57600080fd5b506103b8610bd3565b005b3480156103c657600080fd5b506103e160048036038101906103dc9190612de4565b610f5b565b005b3480156103ef57600080fd5b5061040a60048036038101906104059190612bda565b61101b565b005b34801561041857600080fd5b5061042161107b565b60405161042e91906137b1565b60405180910390f35b34801561044357600080fd5b5061044c61108c565b6040516104599190613811565b60405180910390f35b34801561046e57600080fd5b5061048960048036038101906104849190612bda565b611093565b005b34801561049757600080fd5b506104a06110b3565b6040516104ad9190613811565b60405180910390f35b3480156104c257600080fd5b506104cb6110b8565b6040516104d891906137b1565b60405180910390f35b3480156104ed57600080fd5b506104f66110be565b005b34801561050457600080fd5b5061050d611227565b60405161051a91906133c6565b60405180910390f35b34801561052f57600080fd5b5061054a60048036038101906105459190612d8a565b61123a565b6040516105579190613336565b60405180910390f35b34801561056c57600080fd5b5061058760048036038101906105829190612b6d565b6112ec565b60405161059491906137b1565b60405180910390f35b3480156105a957600080fd5b506105b26113a4565b005b3480156105c057600080fd5b506105db60048036038101906105d69190612d8a565b6113b8565b6040516105e891906137b1565b60405180910390f35b3480156105fd57600080fd5b506106066113dc565b6040516106139190613336565b60405180910390f35b34801561062857600080fd5b50610631611406565b60405161063e9190613434565b60405180910390f35b34801561065357600080fd5b5061066e60048036038101906106699190612cb0565b611498565b005b34801561067c57600080fd5b506106856114ae565b60405161069291906137b1565b60405180910390f35b3480156106a757600080fd5b506106c260048036038101906106bd9190612c2d565b6114d2565b005b3480156106d057600080fd5b506106d9611534565b6040516106e691906137b1565b60405180910390f35b3480156106fb57600080fd5b5061071660048036038101906107119190612d8a565b611558565b6040516107239190613434565b60405180910390f35b34801561073857600080fd5b506107416115c0565b60405161074e9190613796565b60405180910390f35b34801561076357600080fd5b5061076c6115c5565b60405161077991906137b1565b60405180910390f35b34801561078e57600080fd5b506107976115d2565b6040516107a491906137b1565b60405180910390f35b3480156107b957600080fd5b506107d460048036038101906107cf9190612b9a565b6115f6565b6040516107e191906133c6565b60405180910390f35b6107f261168a565b005b34801561080057600080fd5b5061081b60048036038101906108169190612b6d565b61194c565b005b34801561082957600080fd5b506108326119d0565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108ff57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061090f575061090e82611b5c565b5b9050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000610943600b611bc6565b148061096f57507f00000000000000000000000000000000000000000000000000000000000000004310155b1561097d5760019050610982565b600090505b90565b60606000805461099490613ad3565b80601f01602080910402602001604051908101604052809291908181526020018280546109c090613ad3565b8015610a0d5780601f106109e257610100808354040283529160200191610a0d565b820191906000526020600020905b8154815290600101906020018083116109f057829003601f168201915b5050505050905090565b6000600c54905090565b6000610a2c82611bd4565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610a728261123a565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ae3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ada90613736565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b02611c1f565b73ffffffffffffffffffffffffffffffffffffffff161480610b315750610b3081610b2b611c1f565b6115f6565b5b610b70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6790613676565b60405180910390fd5b610b7a8383611c27565b505050565b60076020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015411610c58576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4f90613556565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015410610cfc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf390613756565b60405180910390fd5b610d04610916565b610d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3a90613576565b60405180910390fd5b60006009541415610d89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d80906135f6565b60405180910390fd5b6000610d93611ce0565b9050600060088281548110610dab57610daa613c6c565b5b90600052602060002001549050610dc23382611cfa565b610dcb82611ed4565b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000815480929190610eac90613aa9565b9190505550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000815480929190610f0490613b36565b91905055503373ffffffffffffffffffffffffffffffffffffffff167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe82604051610f4f91906137b1565b60405180910390a25050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461100d57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f4000000000000000000000000000000000000000000000000000000008152600401611004929190613351565b60405180910390fd5b6110178282611f62565b5050565b61102c611026611c1f565b82612011565b61106b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106290613776565b60405180910390fd5b6110768383836120a6565b505050565b6000611087600b611bc6565b905090565b62124f8081565b6110ae838383604051806020016040528060008152506114d2565b505050565b600a81565b60095481565b6110c661230d565b6110ce610916565b61110d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161110490613576565b60405180910390fd5b600a60009054906101000a900460ff161561115d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115490613476565b60405180910390fd5b6001600a60006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff164760405161119e90613321565b60006040518083038185875af1925050503d80600081146111db576040519150601f19603f3d011682016040523d82523d6000602084013e6111e0565b606091505b5050905080611224576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161121b90613496565b60405180910390fd5b50565b600a60009054906101000a900460ff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156112e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112da90613716565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561135d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161135490613656565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6113ac61230d565b6113b6600061238b565b565b600881815481106113c857600080fd5b906000526020600020016000915090505481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461141590613ad3565b80601f016020809104026020016040519081016040528092919081815260200182805461144190613ad3565b801561148e5780601f106114635761010080835404028352916020019161148e565b820191906000526020600020905b81548152906001019060200180831161147157829003601f168201915b5050505050905090565b6114aa6114a3611c1f565b8383612451565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b6114e36114dd611c1f565b83612011565b611522576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161151990613776565b60405180910390fd5b61152e848484846125be565b50505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b606061156382611bd4565b600061156d61261a565b9050600081511161158d57604051806020016040528060008152506115b8565b806115978461263a565b6040516020016115a89291906132fd565b6040516020818303038152906040525b915050919050565b600381565b6000600880549050905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f00000000000000000000000000000000000000000000000000000000000000006116b5600b611bc6565b106116f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ec906136b6565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015410611799576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161179090613616565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000003410156117fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f3906136d6565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000043111561185f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611856906135d6565b60405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008154809291906118b290613b36565b91905055506118c1600b61279b565b60086118cd600b611bc6565b90806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff167f8ef92257fbc070823c8bb4051ff3a58b831946d893fbb1bfd9bc77b87ff77d09611935600b611bc6565b60405161194291906137b1565b60405180910390a2565b61195461230d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156119c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119bb906134d6565b60405180910390fd5b6119cd8161238b565b50565b6000600c5414611a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a0c90613456565b60405180910390fd5b611a1d610916565b611a5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5390613576565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600362124f80600a6040518663ffffffff1660e01b8152600401611b029594939291906133e1565b602060405180830381600087803b158015611b1c57600080fd5b505af1158015611b30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b549190612db7565b600c81905550565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600081600001549050919050565b611bdd816127b1565b611c1c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c1390613716565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611c9a8361123a565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600880549050600954611cf59190613b7f565b905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611d6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6190613696565b60405180910390fd5b611d73816127b1565b15611db3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611daa90613516565b60405180910390fd5b611dbf6000838361281d565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e0f91906138fc565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611ed060008383612822565b5050565b6008805490508110611ee557600080fd5b60086001600880549050611ef99190613983565b81548110611f0a57611f09613c6c565b5b906000526020600020015460088281548110611f2957611f28613c6c565b5b90600052602060002001819055506008805480611f4957611f48613c3d565b5b6001900381819060005260206000200160009055905550565b81600c5414611fa6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f9d90613636565b60405180910390fd5b600060095414611feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe290613536565b60405180910390fd5b80600081518110611fff57611ffe613c6c565b5b60200260200101516009819055505050565b60008061201d8361123a565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16148061205f575061205e81856115f6565b5b8061209d57508373ffffffffffffffffffffffffffffffffffffffff1661208584610a21565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166120c68261123a565b73ffffffffffffffffffffffffffffffffffffffff161461211c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612113906134f6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561218c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218390613596565b60405180910390fd5b61219783838361281d565b6121a2600082611c27565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121f29190613983565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461224991906138fc565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612308838383612822565b505050565b612315611c1f565b73ffffffffffffffffffffffffffffffffffffffff166123336113dc565b73ffffffffffffffffffffffffffffffffffffffff1614612389576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612380906136f6565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156124c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124b7906135b6565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516125b191906133c6565b60405180910390a3505050565b6125c98484846120a6565b6125d584848484612827565b612614576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161260b906134b6565b60405180910390fd5b50505050565b60606040518060800160405280604481526020016142ae60449139905090565b60606000821415612682576040518060400160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509050612796565b600082905060005b600082146126b457808061269d90613b36565b915050600a826126ad9190613952565b915061268a565b60008167ffffffffffffffff8111156126d0576126cf613c9b565b5b6040519080825280601f01601f1916602001820160405280156127025781602001600182028036833780820191505090505b5090505b6000851461278f5760018261271b9190613983565b9150600a8561272a9190613b7f565b603061273691906138fc565b60f81b81838151811061274c5761274b613c6c565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856127889190613952565b9450612706565b8093505050505b919050565b6001816000016000828254019250508190555050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b60006128488473ffffffffffffffffffffffffffffffffffffffff166129be565b156129b1578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02612871611c1f565b8786866040518563ffffffff1660e01b8152600401612893949392919061337a565b602060405180830381600087803b1580156128ad57600080fd5b505af19250505080156128de57506040513d601f19601f820116820180604052508101906128db9190612d5d565b60015b612961573d806000811461290e576040519150601f19603f3d011682016040523d82523d6000602084013e612913565b606091505b50600081511415612959576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612950906134b6565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506129b6565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b60006129f46129ef84613851565b61382c565b90508083825260208201905082856020860282011115612a1757612a16613ccf565b5b60005b85811015612a475781612a2d8882612b43565b845260208401935060208301925050600181019050612a1a565b5050509392505050565b6000612a64612a5f8461387d565b61382c565b905082815260208101848484011115612a8057612a7f613cd4565b5b612a8b848285613a67565b509392505050565b600081359050612aa281614251565b92915050565b600082601f830112612abd57612abc613cca565b5b8135612acd8482602086016129e1565b91505092915050565b600081359050612ae581614268565b92915050565b600081359050612afa8161427f565b92915050565b600081519050612b0f8161427f565b92915050565b600082601f830112612b2a57612b29613cca565b5b8135612b3a848260208601612a51565b91505092915050565b600081359050612b5281614296565b92915050565b600081519050612b6781614296565b92915050565b600060208284031215612b8357612b82613cde565b5b6000612b9184828501612a93565b91505092915050565b60008060408385031215612bb157612bb0613cde565b5b6000612bbf85828601612a93565b9250506020612bd085828601612a93565b9150509250929050565b600080600060608486031215612bf357612bf2613cde565b5b6000612c0186828701612a93565b9350506020612c1286828701612a93565b9250506040612c2386828701612b43565b9150509250925092565b60008060008060808587031215612c4757612c46613cde565b5b6000612c5587828801612a93565b9450506020612c6687828801612a93565b9350506040612c7787828801612b43565b925050606085013567ffffffffffffffff811115612c9857612c97613cd9565b5b612ca487828801612b15565b91505092959194509250565b60008060408385031215612cc757612cc6613cde565b5b6000612cd585828601612a93565b9250506020612ce685828601612ad6565b9150509250929050565b60008060408385031215612d0757612d06613cde565b5b6000612d1585828601612a93565b9250506020612d2685828601612b43565b9150509250929050565b600060208284031215612d4657612d45613cde565b5b6000612d5484828501612aeb565b91505092915050565b600060208284031215612d7357612d72613cde565b5b6000612d8184828501612b00565b91505092915050565b600060208284031215612da057612d9f613cde565b5b6000612dae84828501612b43565b91505092915050565b600060208284031215612dcd57612dcc613cde565b5b6000612ddb84828501612b58565b91505092915050565b60008060408385031215612dfb57612dfa613cde565b5b6000612e0985828601612b43565b925050602083013567ffffffffffffffff811115612e2a57612e29613cd9565b5b612e3685828601612aa8565b9150509250929050565b612e49816139b7565b82525050565b612e58816139c9565b82525050565b612e67816139d5565b82525050565b6000612e78826138ae565b612e8281856138c4565b9350612e92818560208601613a76565b612e9b81613ce3565b840191505092915050565b6000612eb1826138b9565b612ebb81856138e0565b9350612ecb818560208601613a76565b612ed481613ce3565b840191505092915050565b6000612eea826138b9565b612ef481856138f1565b9350612f04818560208601613a76565b80840191505092915050565b6000612f1d6018836138e0565b9150612f2882613cf4565b602082019050919050565b6000612f406018836138e0565b9150612f4b82613d1d565b602082019050919050565b6000612f636016836138e0565b9150612f6e82613d46565b602082019050919050565b6000612f866032836138e0565b9150612f9182613d6f565b604082019050919050565b6000612fa96026836138e0565b9150612fb482613dbe565b604082019050919050565b6000612fcc6025836138e0565b9150612fd782613e0d565b604082019050919050565b6000612fef601c836138e0565b9150612ffa82613e5c565b602082019050919050565b60006130126013836138e0565b915061301d82613e85565b602082019050919050565b6000613035601d836138e0565b915061304082613eae565b602082019050919050565b60006130586011836138e0565b915061306382613ed7565b602082019050919050565b600061307b6024836138e0565b915061308682613f00565b604082019050919050565b600061309e6019836138e0565b91506130a982613f4f565b602082019050919050565b60006130c16010836138e0565b91506130cc82613f78565b602082019050919050565b60006130e46012836138e0565b91506130ef82613fa1565b602082019050919050565b60006131076013836138e0565b915061311282613fca565b602082019050919050565b600061312a6016836138e0565b915061313582613ff3565b602082019050919050565b600061314d6029836138e0565b91506131588261401c565b604082019050919050565b6000613170603e836138e0565b915061317b8261406b565b604082019050919050565b60006131936020836138e0565b915061319e826140ba565b602082019050919050565b60006131b66010836138e0565b91506131c1826140e3565b602082019050919050565b60006131d96014836138e0565b91506131e48261410c565b602082019050919050565b60006131fc6020836138e0565b915061320782614135565b602082019050919050565b600061321f6018836138e0565b915061322a8261415e565b602082019050919050565b60006132426021836138e0565b915061324d82614187565b604082019050919050565b60006132656000836138d5565b9150613270826141d6565b600082019050919050565b6000613288601c836138e0565b9150613293826141d9565b602082019050919050565b60006132ab602e836138e0565b91506132b682614202565b604082019050919050565b6132ca81613a0b565b82525050565b6132d981613a39565b82525050565b6132e881613a43565b82525050565b6132f781613a53565b82525050565b60006133098285612edf565b91506133158284612edf565b91508190509392505050565b600061332c82613258565b9150819050919050565b600060208201905061334b6000830184612e40565b92915050565b60006040820190506133666000830185612e40565b6133736020830184612e40565b9392505050565b600060808201905061338f6000830187612e40565b61339c6020830186612e40565b6133a960408301856132d0565b81810360608301526133bb8184612e6d565b905095945050505050565b60006020820190506133db6000830184612e4f565b92915050565b600060a0820190506133f66000830188612e5e565b61340360208301876132ee565b61341060408301866132c1565b61341d60608301856132df565b61342a60808301846132df565b9695505050505050565b6000602082019050818103600083015261344e8184612ea6565b905092915050565b6000602082019050818103600083015261346f81612f10565b9050919050565b6000602082019050818103600083015261348f81612f33565b9050919050565b600060208201905081810360008301526134af81612f56565b9050919050565b600060208201905081810360008301526134cf81612f79565b9050919050565b600060208201905081810360008301526134ef81612f9c565b9050919050565b6000602082019050818103600083015261350f81612fbf565b9050919050565b6000602082019050818103600083015261352f81612fe2565b9050919050565b6000602082019050818103600083015261354f81613005565b9050919050565b6000602082019050818103600083015261356f81613028565b9050919050565b6000602082019050818103600083015261358f8161304b565b9050919050565b600060208201905081810360008301526135af8161306e565b9050919050565b600060208201905081810360008301526135cf81613091565b9050919050565b600060208201905081810360008301526135ef816130b4565b9050919050565b6000602082019050818103600083015261360f816130d7565b9050919050565b6000602082019050818103600083015261362f816130fa565b9050919050565b6000602082019050818103600083015261364f8161311d565b9050919050565b6000602082019050818103600083015261366f81613140565b9050919050565b6000602082019050818103600083015261368f81613163565b9050919050565b600060208201905081810360008301526136af81613186565b9050919050565b600060208201905081810360008301526136cf816131a9565b9050919050565b600060208201905081810360008301526136ef816131cc565b9050919050565b6000602082019050818103600083015261370f816131ef565b9050919050565b6000602082019050818103600083015261372f81613212565b9050919050565b6000602082019050818103600083015261374f81613235565b9050919050565b6000602082019050818103600083015261376f8161327b565b9050919050565b6000602082019050818103600083015261378f8161329e565b9050919050565b60006020820190506137ab60008301846132c1565b92915050565b60006020820190506137c660008301846132d0565b92915050565b60006080820190506137e160008301876132d0565b6137ee60208301866132d0565b6137fb60408301856132d0565b61380860608301846132d0565b95945050505050565b600060208201905061382660008301846132df565b92915050565b6000613836613847565b90506138428282613b05565b919050565b6000604051905090565b600067ffffffffffffffff82111561386c5761386b613c9b565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561389857613897613c9b565b5b6138a182613ce3565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061390782613a39565b915061391283613a39565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561394757613946613bb0565b5b828201905092915050565b600061395d82613a39565b915061396883613a39565b92508261397857613977613bdf565b5b828204905092915050565b600061398e82613a39565b915061399983613a39565b9250828210156139ac576139ab613bb0565b5b828203905092915050565b60006139c282613a19565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015613a94578082015181840152602081019050613a79565b83811115613aa3576000848401525b50505050565b6000613ab482613a39565b91506000821415613ac857613ac7613bb0565b5b600182039050919050565b60006002820490506001821680613aeb57607f821691505b60208210811415613aff57613afe613c0e565b5b50919050565b613b0e82613ce3565b810181811067ffffffffffffffff82111715613b2d57613b2c613c9b565b5b80604052505050565b6000613b4182613a39565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b7457613b73613bb0565b5b600182019050919050565b6000613b8a82613a39565b9150613b9583613a39565b925082613ba557613ba4613bdf565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f72616e646f6d20616c7265616479207265717565737465640000000000000000600082015250565b7f50726f636565647320616c726561647920636c61696d65640000000000000000600082015250565b7f556e7375636365737366756c20696e207061796f757400000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f656e74726f707920616c72656164792073657400000000000000000000000000600082015250565b7f4164647265737320646f6573206e6f74206f776e2061207469636b6574000000600082015250565b7f526166666c65207374696c6c206f70656e000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f526166666c652068617320656e64656400000000000000000000000000000000600082015250565b7f456e74726f7079206973206e6f74207365740000000000000000000000000000600082015250565b7f41646472657373206f776e73207469636b657400000000000000000000000000600082015250565b7f72657175657374496420646f206e6f74206d6174636800000000000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f416c6c207469636b65747320736f6c6400000000000000000000000000000000600082015250565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4d617820616c6c6f77207065722061646472657373206d696e74656400000000600082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b61425a816139b7565b811461426557600080fd5b50565b614271816139c9565b811461427c57600080fd5b50565b614288816139df565b811461429357600080fd5b50565b61429f81613a39565b81146142aa57600080fd5b5056fe68747470733a2f2f697066732e696f2f697066732f516d5178446a45686e5950365141744c52794c56394e37646e316b4469677a3769576e783570736d7958717933352fa26469706673582212209f0c91474c5c68a1ec54ba6e52738a4c72d9d7a704fd6e4dc593ed234d5db5c764736f6c63430008070033",
=======
  "solcInputHash": "ae11bc4a0768914c88b145db88204928",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_AVAILABLE_SUPPLY\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_MINT_COST\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_RAFFLE_BLOCKS_DURATION\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"ticketId\",\"type\":\"uint256\"}],\"name\":\"TicketSold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AVAILABLE_SUPPLY\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CALLBACK_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_PER_ADDRESS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINT_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"NFTsId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RAFFLE_FINALIZATION_BLOCKNUMBER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WORDS_AMOUNT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_soldTicketsCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"buyTicket\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entropy\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"geSoldTickets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNFTsIdLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isRaffleOpen\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"participants\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"randomIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minted\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"ownedTickets\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proceedsClaimed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestRandomness\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRaffleProceeds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Rloot\",\"events\":{\"Minted(address,uint256)\":{\"params\":{\"tokenId\":\"Number of the ticket sold\",\"user\":\"Address of raffle participant\"}},\"TicketSold(address,uint256)\":{\"params\":{\"ticketId\":\"Number of the ticket sold\",\"user\":\"Address of raffle participant\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"params\":{\"_AVAILABLE_SUPPLY\":\"total NFTs to sell\",\"_MINT_COST\":\"in wei per ticket\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"ShuffleOne\",\"version\":1},\"userdoc\":{\"events\":{\"Minted(address,uint256)\":{\"notice\":\"Emitted after a successful mint \"},\"TicketSold(address,uint256)\":{\"notice\":\"Emitted after a successful ticket sell \"}},\"kind\":\"user\",\"methods\":{\"AVAILABLE_SUPPLY()\":{\"notice\":\"Avalible NFTs to be minted\"},\"MAX_PER_ADDRESS()\":{\"notice\":\"Maximum tickets per address\"},\"MINT_COST()\":{\"notice\":\"Minimum cost for ticket\"},\"NFTsId(uint256)\":{\"notice\":\"Array of NFTs ID to be minted \"},\"RAFFLE_FINALIZATION_BLOCKNUMBER()\":{\"notice\":\"Blocknumber raffle ends at.\"},\"_soldTicketsCounter()\":{\"notice\":\"Keeps track of sold tickets \"},\"buyTicket()\":{\"notice\":\"Enters raffle \"},\"constructor\":{\"notice\":\"Creates a new NFT distribution contract\"},\"entropy()\":{\"notice\":\"Source of entropy\"},\"geSoldTickets()\":{\"notice\":\"Get total numbers of tickets sold \"},\"getNFTsIdLength()\":{\"notice\":\"Get the lengths of the NFTsIds array\"},\"mint()\":{\"notice\":\"Generate rand index for the NFTid, mint NFT and remove it from array \"},\"participants(address)\":{\"notice\":\"Keep track of participants \"},\"proceedsClaimed()\":{\"notice\":\"Owner has claimed raffle proceeds\"},\"withdrawRaffleProceeds()\":{\"notice\":\"Allows contract owner to withdraw proceeds of tickets\"}},\"notice\":\"ERC721 randomized distribution\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ShuffleOne.sol\":\"ShuffleOne\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address internal immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x60507c8bfa96d46e2a7fdd98a3e67378e83833b114a669aeaaea35c6cd1894ab\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ShuffleOne.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/// ============ Imports ============\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\"; //OZ: ERC721\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\"; // OZ: Ownership\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\"; //OZ: Counter\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n\\n/// @title ShuffleOne\\n/// @author Rloot\\n/// @notice ERC721 randomized distribution\\ncontract ShuffleOne is VRFConsumerBaseV2, ERC721, Ownable {\\n    using Counters for Counters.Counter;\\n\\n    /// ============ Structs ============\\n    \\n    /// @notice Users participants data\\n    struct Participant {\\n        // NFT token ID granted to be mint\\n        uint256 tokenId;\\n        // Index used to select token id\\n        uint256 randomIndex;\\n        // Number minted tokens\\n        uint256 minted;\\n        // Count of tickets bought\\n        uint256 ownedTickets; \\n    }\\n\\n    /// ============ Immutable storage ============\\n\\n    /// @notice Blocknumber raffle ends at.\\n    uint256 public immutable RAFFLE_FINALIZATION_BLOCKNUMBER;\\n    /// @notice Avalible NFTs to be minted\\n    uint256 public immutable AVAILABLE_SUPPLY;\\n    /// @notice Minimum cost for ticket\\n    uint256 public immutable MINT_COST;\\n    /// @notice Maximum tickets per address\\n    uint256 public immutable MAX_PER_ADDRESS = 1;\\n\\n    /// ============ Mutable storage ============\\n\\n    /// @notice Keep track of participants \\n    mapping (address => Participant) public participants;\\n    /// @notice Array of NFTs ID to be minted \\n    uint256[] public NFTsId;\\n    /// @notice Source of entropy\\n    uint256 public entropy;\\n    /// @notice Owner has claimed raffle proceeds\\n    bool public proceedsClaimed = false;\\n\\n    /// @notice Keeps track of sold tickets \\n    Counters.Counter public _soldTicketsCounter;\\n\\n    // VRF v2\\n    bytes32 internal immutable _keyHash;\\n    uint64 internal immutable _subId;\\n    \\n    uint256 internal _requestId;\\n\\n    uint16 public constant MINIMUM_CONFIRMATIONS = 3;\\n    uint32 public constant CALLBACK_GAS_LIMIT = 1_200_000;\\n    uint32 public constant WORDS_AMOUNT = 10;\\n\\n    /// ============ Events ============\\n\\n    /// @notice Emitted after a successful ticket sell \\n    /// @param user Address of raffle participant\\n    /// @param ticketId Number of the ticket sold\\n    event TicketSold(address indexed user, uint256 ticketId);\\n\\n    /// @notice Emitted after a successful mint \\n    /// @param user Address of raffle participant\\n    /// @param tokenId Number of the ticket sold\\n    event Minted(address indexed user, uint256 tokenId);\\n\\n    /// ============ Constructor ============\\n\\n    /// @notice Creates a new NFT distribution contract\\n    /// @param _AVAILABLE_SUPPLY total NFTs to sell\\n    /// @param _MINT_COST in wei per ticket\\n    constructor(\\n        address vrfCoordinator,\\n        bytes32 keyHash,\\n        uint64 subId,\\n        uint256 _AVAILABLE_SUPPLY,\\n        uint256 _MINT_COST,\\n        uint256 _RAFFLE_BLOCKS_DURATION\\n    )\\n        ERC721(\\\"Random NFT\\\", \\\"rNFT\\\")\\n        VRFConsumerBaseV2(vrfCoordinator)\\n    {\\n        AVAILABLE_SUPPLY = _AVAILABLE_SUPPLY;\\n        MINT_COST = _MINT_COST;\\n        RAFFLE_FINALIZATION_BLOCKNUMBER = block.number + _RAFFLE_BLOCKS_DURATION; \\n\\n        _keyHash = keyHash;\\n        _subId = subId;\\n    }\\n\\n    /// ============ Functions ============\\n\\n    /// @notice Enters raffle \\n    function buyTicket() external payable {\\n        // Ensure there are tickets to be sell\\n        require(_soldTicketsCounter.current() < AVAILABLE_SUPPLY, \\\"All tickets sold\\\");\\n        // Ensure participant owns no more than allow\\n        require(participants[msg.sender].ownedTickets < MAX_PER_ADDRESS, \\\"Address owns ticket\\\");\\n        // Ensure sufficient raffle ticket payment\\n        require(msg.value >= MINT_COST, \\\"Insufficient payment\\\");\\n        // Ensure raffle is open\\n        require(block.number <= RAFFLE_FINALIZATION_BLOCKNUMBER, \\\"Raffle has ended\\\");\\n\\n        // Participant gets ticket\\n        participants[msg.sender].ownedTickets++;\\n        \\n        // Total sold tickets counter updated\\n        _soldTicketsCounter.increment();\\n\\n        // Add NFT ID to be minted\\n        NFTsId.push(_soldTicketsCounter.current()); \\n        \\n        // Emmit succesfull entry\\n        emit TicketSold(msg.sender, _soldTicketsCounter.current());\\n    }\\n\\n    function requestRandomness() external {\\n        require(_requestId == 0, 'random already requested');\\n        require(isRaffleOpen(), \\\"Raffle still open\\\");\\n\\n        _requestId = VRFCoordinatorV2Interface(vrfCoordinator).requestRandomWords(\\n            _keyHash, _subId, MINIMUM_CONFIRMATIONS, CALLBACK_GAS_LIMIT, WORDS_AMOUNT\\n        );\\n    }\\n\\n    function getRequestId() external view returns(uint256) {\\n        return _requestId;\\n    }\\n\\n    function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal override {\\n        // verify requestId\\n        require(_requestId == requestId, \\\"requestId do not match\\\");\\n        require(entropy == 0, \\\"entropy already set\\\");\\n        // set entropy\\n        entropy = randomWords[0];\\n    }\\n\\n\\n    /// @notice Generate rand index for the NFTid, mint NFT and remove it from array \\n    function mint() public {\\n        // Ensure participant owns ticket\\n        require(participants[msg.sender].ownedTickets > 0, \\\"Address does not own a ticket\\\");\\n        // Ensure minted amount < max allow\\n        require(participants[msg.sender].minted < MAX_PER_ADDRESS, \\\"Max allow per address minted\\\");\\n        // Ensure raffle is closed\\n        require(!isRaffleOpen(), \\\"Raffle still open\\\");\\n        // Ensure entropy is set\\n        require(entropy != 0, \\\"Entropy is not set\\\");\\n\\n        // Pick index from NFTsIds\\n        uint256 randomIndex = getRandomIndex();\\n        \\n        // Get random ID value from NFTsIds\\n        uint256 randomNFTsId = NFTsId[randomIndex];\\n\\n        // Mint random NFT\\n        _mint(msg.sender, randomNFTsId);\\n\\n        // Remove minted ID from NFTsIds array\\n        removeIndexFromArray(randomIndex);\\n        // Update participants data\\n        participants[msg.sender].randomIndex = randomIndex;\\n        participants[msg.sender].tokenId = randomNFTsId;\\n        participants[msg.sender].ownedTickets--;\\n        participants[msg.sender].minted++;\\n\\n        // Emit minted NFT\\n        emit Minted(msg.sender, randomNFTsId);\\n    }\\n\\n    /// @notice Get a random index from the NFTsId array \\n    function getRandomIndex() internal view returns (uint) {\\n        // Picks a random index between 0 and NFTsIDs length\\n        return entropy % NFTsId.length;\\n    }\\n\\n    /// @notice Delete minted id from array, gas efficient, no re-ordering of indexs\\n    /// @param index element to be deleted from NFTsId after bein minted\\n    function removeIndexFromArray(uint index) internal {\\n        // Ensure to avoid removing and not existing index\\n        require(index < NFTsId.length);\\n\\n        // Move the last element to the index of the deleted one \\n        NFTsId[index] = NFTsId[NFTsId.length-1];\\n\\n        // Remove last element\\n        NFTsId.pop();\\n    }\\n\\n    /// @notice Get the lengths of the NFTsIds array\\n    function getNFTsIdLength() public view returns (uint256) {\\n        return NFTsId.length;\\n    }\\n\\n    /// @notice Get total numbers of tickets sold \\n    function geSoldTickets() public view returns (uint256) {\\n        return _soldTicketsCounter.current();\\n    }\\n\\n    /// @notice Allows contract owner to withdraw proceeds of tickets\\n    function withdrawRaffleProceeds() external onlyOwner {\\n        // Ensure raffle has ended\\n        require(!isRaffleOpen(), \\\"Raffle still open\\\");        // Ensure proceeds have not already been claimed\\n        require(!proceedsClaimed, \\\"Proceeds already claimed\\\");\\n\\n        // Toggle proceeds being claimed\\n        proceedsClaimed = true;\\n\\n        // Pay owner proceeds\\n        (bool sent, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\"); \\n        require(sent, \\\"Unsuccessful in payout\\\");\\n    }\\n\\n    // @Notice overrides base url\\n    function _baseURI() internal view override virtual returns (string memory) {\\n        return \\\"https://ipfs.io/ipfs/QmQxDjEhnYP6QAtLRyLV9N7dn1kDigz7iWnx5psmyXqy35/\\\";\\n    }\\n\\n    function isRaffleOpen() public view returns (bool) {\\n        if (\\n            _soldTicketsCounter.current() < AVAILABLE_SUPPLY && \\n            block.number <= RAFFLE_FINALIZATION_BLOCKNUMBER\\n        ) { \\n            return true; \\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc4fd200de2b251bd55ceb16944349af37a291b4cb51db3af6ee8cb81a784cba6\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6101606040526001610100908152506000600a60006101000a81548160ff0219169083151502179055503480156200003657600080fd5b50604051620049eb380380620049eb83398181016040528101906200005c919062000389565b6040518060400160405280600a81526020017f52616e646f6d204e4654000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f724e465400000000000000000000000000000000000000000000000000000000815250878073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508160009080519060200190620001199291906200027d565b508060019080519060200190620001329291906200027d565b5050506200015562000149620001af60201b60201c565b620001b760201b60201c565b8260c081815250508160e08181525050804362000173919062000425565b60a081815250508461012081815250508367ffffffffffffffff166101408167ffffffffffffffff1660c01b81525050505050505050620005df565b600033905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8280546200028b90620004de565b90600052602060002090601f016020900481019282620002af5760008555620002fb565b82601f10620002ca57805160ff1916838001178555620002fb565b82800160010185558215620002fb579182015b82811115620002fa578251825591602001919060010190620002dd565b5b5090506200030a91906200030e565b5090565b5b80821115620003295760008160009055506001016200030f565b5090565b6000815190506200033e8162000577565b92915050565b600081519050620003558162000591565b92915050565b6000815190506200036c81620005ab565b92915050565b6000815190506200038381620005c5565b92915050565b60008060008060008060c08789031215620003a957620003a862000572565b5b6000620003b989828a016200032d565b9650506020620003cc89828a0162000344565b9550506040620003df89828a0162000372565b9450506060620003f289828a016200035b565b93505060806200040589828a016200035b565b92505060a06200041889828a016200035b565b9150509295509295509295565b60006200043282620004c0565b91506200043f83620004c0565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111562000477576200047662000514565b5b828201905092915050565b60006200048f82620004a0565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600067ffffffffffffffff82169050919050565b60006002820490506001821680620004f757607f821691505b602082108114156200050e576200050d62000543565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600080fd5b620005828162000482565b81146200058e57600080fd5b50565b6200059c8162000496565b8114620005a857600080fd5b50565b620005b681620004c0565b8114620005c257600080fd5b50565b620005d081620004ca565b8114620005dc57600080fd5b50565b60805160601c60a05160c05160e05161010051610120516101405160c01c61436c6200067f6000396000611b0001526000611adf015260008181610be801528181610c91015261173c01526000818161157b01526117e0015260008181610950015281816114e901526116d1015260008181610983015281816116190152611843015260008181610fa601528181610ffa0152611aa3015261436c6000f3fe60806040526004361061021a5760003560e01c80636352211e11610123578063be204c14116100ab578063e6f8bff71161006f578063e6f8bff7146107b8578063e985e9c5146107e3578063edca914c14610820578063f2fde38b1461082a578063f8413b07146108535761021a565b8063be204c14146106cf578063c662e481146106fa578063c87b56dd14610725578063d089adc714610762578063d60ed9a81461078d5761021a565b80638da5cb5b116100f25780638da5cb5b146105fc57806395d89b4114610627578063a22cb46514610652578063b438e12e1461067b578063b88d4fde146106a65761021a565b80636352211e1461052e57806370a082311461056b578063715018a6146105a85780637885142d146105bf5761021a565b806316a098cb116101a657806342842e0e1161017557806342842e0e1461046d5780634694ad9c1461049657806347ce07cc146104c157806355003593146104ec5780635bc46074146105035761021a565b806316a098cb146103c55780631fe543e3146103f057806323b872dd1461041957806333d608f1146104425761021a565b8063081812fc116101ed578063081812fc146102dd578063095ea7b31461031a57806309e69ede146103435780630aaef285146103835780631249c58b146103ae5761021a565b806301ffc9a71461021f578063060cb05d1461025c57806306fdde0314610287578063077001b9146102b2575b600080fd5b34801561022b57600080fd5b5061024660048036038101906102419190612d75565b61086a565b604051610253919061340b565b60405180910390f35b34801561026857600080fd5b5061027161094c565b60405161027e919061340b565b60405180910390f35b34801561029357600080fd5b5061029c6109bc565b6040516102a99190613479565b60405180910390f35b3480156102be57600080fd5b506102c7610a4e565b6040516102d491906137f6565b60405180910390f35b3480156102e957600080fd5b5061030460048036038101906102ff9190612dcf565b610a58565b604051610311919061337b565b60405180910390f35b34801561032657600080fd5b50610341600480360381019061033c9190612d35565b610a9e565b005b34801561034f57600080fd5b5061036a60048036038101906103659190612bb2565b610bb6565b60405161037a9493929190613811565b60405180910390f35b34801561038f57600080fd5b50610398610be6565b6040516103a591906137f6565b60405180910390f35b3480156103ba57600080fd5b506103c3610c0a565b005b3480156103d157600080fd5b506103da610f93565b6040516103e791906137f6565b60405180910390f35b3480156103fc57600080fd5b5061041760048036038101906104129190612e29565b610fa4565b005b34801561042557600080fd5b50610440600480360381019061043b9190612c1f565b611064565b005b34801561044e57600080fd5b506104576110c4565b6040516104649190613856565b60405180910390f35b34801561047957600080fd5b50610494600480360381019061048f9190612c1f565b6110cb565b005b3480156104a257600080fd5b506104ab6110eb565b6040516104b89190613856565b60405180910390f35b3480156104cd57600080fd5b506104d66110f0565b6040516104e391906137f6565b60405180910390f35b3480156104f857600080fd5b506105016110f6565b005b34801561050f57600080fd5b50610518611260565b604051610525919061340b565b60405180910390f35b34801561053a57600080fd5b5061055560048036038101906105509190612dcf565b611273565b604051610562919061337b565b60405180910390f35b34801561057757600080fd5b50610592600480360381019061058d9190612bb2565b611325565b60405161059f91906137f6565b60405180910390f35b3480156105b457600080fd5b506105bd6113dd565b005b3480156105cb57600080fd5b506105e660048036038101906105e19190612dcf565b6113f1565b6040516105f391906137f6565b60405180910390f35b34801561060857600080fd5b50610611611415565b60405161061e919061337b565b60405180910390f35b34801561063357600080fd5b5061063c61143f565b6040516106499190613479565b60405180910390f35b34801561065e57600080fd5b5061067960048036038101906106749190612cf5565b6114d1565b005b34801561068757600080fd5b506106906114e7565b60405161069d91906137f6565b60405180910390f35b3480156106b257600080fd5b506106cd60048036038101906106c89190612c72565b61150b565b005b3480156106db57600080fd5b506106e461156d565b6040516106f191906137f6565b60405180910390f35b34801561070657600080fd5b5061070f611579565b60405161071c91906137f6565b60405180910390f35b34801561073157600080fd5b5061074c60048036038101906107479190612dcf565b61159d565b6040516107599190613479565b60405180910390f35b34801561076e57600080fd5b50610777611605565b60405161078491906137db565b60405180910390f35b34801561079957600080fd5b506107a261160a565b6040516107af91906137f6565b60405180910390f35b3480156107c457600080fd5b506107cd611617565b6040516107da91906137f6565b60405180910390f35b3480156107ef57600080fd5b5061080a60048036038101906108059190612bdf565b61163b565b604051610817919061340b565b60405180910390f35b6108286116cf565b005b34801561083657600080fd5b50610851600480360381019061084c9190612bb2565b611991565b005b34801561085f57600080fd5b50610868611a15565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061093557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610945575061094482611ba1565b5b9050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000610979600b611c0b565b1080156109a657507f00000000000000000000000000000000000000000000000000000000000000004311155b156109b457600190506109b9565b600090505b90565b6060600080546109cb90613b18565b80601f01602080910402602001604051908101604052809291908181526020018280546109f790613b18565b8015610a445780601f10610a1957610100808354040283529160200191610a44565b820191906000526020600020905b815481529060010190602001808311610a2757829003601f168201915b5050505050905090565b6000600c54905090565b6000610a6382611c19565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610aa982611273565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b119061377b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b39611c64565b73ffffffffffffffffffffffffffffffffffffffff161480610b685750610b6781610b62611c64565b61163b565b5b610ba7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9e906136bb565b60405180910390fd5b610bb18383611c6c565b505050565b60076020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015411610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c869061359b565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015410610d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2a9061379b565b60405180910390fd5b610d3b61094c565b15610d7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d72906135bb565b60405180910390fd5b60006009541415610dc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db89061363b565b60405180910390fd5b6000610dcb611d25565b9050600060088281548110610de357610de2613cb1565b5b90600052602060002001549050610dfa3382611d3f565b610e0382611f19565b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000815480929190610ee490613aee565b9190505550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000815480929190610f3c90613b7b565b91905055503373ffffffffffffffffffffffffffffffffffffffff167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe82604051610f8791906137f6565b60405180910390a25050565b6000610f9f600b611c0b565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461105657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161104d929190613396565b60405180910390fd5b6110608282611fa7565b5050565b61107561106f611c64565b82612056565b6110b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ab906137bb565b60405180910390fd5b6110bf8383836120eb565b505050565b62124f8081565b6110e68383836040518060200160405280600081525061150b565b505050565b600a81565b60095481565b6110fe612352565b61110661094c565b15611146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113d906135bb565b60405180910390fd5b600a60009054906101000a900460ff1615611196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118d906134bb565b60405180910390fd5b6001600a60006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff16476040516111d790613366565b60006040518083038185875af1925050503d8060008114611214576040519150601f19603f3d011682016040523d82523d6000602084013e611219565b606091505b505090508061125d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611254906134db565b60405180910390fd5b50565b600a60009054906101000a900460ff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561131c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113139061375b565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138d9061369b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6113e5612352565b6113ef60006123d0565b565b6008818154811061140157600080fd5b906000526020600020016000915090505481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461144e90613b18565b80601f016020809104026020016040519081016040528092919081815260200182805461147a90613b18565b80156114c75780601f1061149c576101008083540402835291602001916114c7565b820191906000526020600020905b8154815290600101906020018083116114aa57829003601f168201915b5050505050905090565b6114e36114dc611c64565b8383612496565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61151c611516611c64565b83612056565b61155b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611552906137bb565b60405180910390fd5b61156784848484612603565b50505050565b600b8060000154905081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606115a882611c19565b60006115b261265f565b905060008151116115d257604051806020016040528060008152506115fd565b806115dc8461267f565b6040516020016115ed929190613342565b6040516020818303038152906040525b915050919050565b600381565b6000600880549050905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f00000000000000000000000000000000000000000000000000000000000000006116fa600b611c0b565b1061173a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611731906136fb565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154106117de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d59061365b565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015611841576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118389061371b565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000004311156118a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189b9061361b565b60405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008154809291906118f790613b7b565b9190505550611906600b6127e0565b6008611912600b611c0b565b90806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff167f8ef92257fbc070823c8bb4051ff3a58b831946d893fbb1bfd9bc77b87ff77d0961197a600b611c0b565b60405161198791906137f6565b60405180910390a2565b611999612352565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a009061351b565b60405180910390fd5b611a12816123d0565b50565b6000600c5414611a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a519061349b565b60405180910390fd5b611a6261094c565b611aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a98906135bb565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600362124f80600a6040518663ffffffff1660e01b8152600401611b47959493929190613426565b602060405180830381600087803b158015611b6157600080fd5b505af1158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b999190612dfc565b600c81905550565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600081600001549050919050565b611c22816127f6565b611c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c589061375b565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611cdf83611273565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600880549050600954611d3a9190613bc4565b905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da6906136db565b60405180910390fd5b611db8816127f6565b15611df8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611def9061355b565b60405180910390fd5b611e0460008383612862565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e549190613941565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f1560008383612867565b5050565b6008805490508110611f2a57600080fd5b60086001600880549050611f3e91906139c8565b81548110611f4f57611f4e613cb1565b5b906000526020600020015460088281548110611f6e57611f6d613cb1565b5b90600052602060002001819055506008805480611f8e57611f8d613c82565b5b6001900381819060005260206000200160009055905550565b81600c5414611feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe29061367b565b60405180910390fd5b600060095414612030576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120279061357b565b60405180910390fd5b8060008151811061204457612043613cb1565b5b60200260200101516009819055505050565b60008061206283611273565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806120a457506120a3818561163b565b5b806120e257508373ffffffffffffffffffffffffffffffffffffffff166120ca84610a58565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661210b82611273565b73ffffffffffffffffffffffffffffffffffffffff1614612161576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121589061353b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c8906135db565b60405180910390fd5b6121dc838383612862565b6121e7600082611c6c565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461223791906139c8565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461228e9190613941565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461234d838383612867565b505050565b61235a611c64565b73ffffffffffffffffffffffffffffffffffffffff16612378611415565b73ffffffffffffffffffffffffffffffffffffffff16146123ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c59061373b565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124fc906135fb565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516125f6919061340b565b60405180910390a3505050565b61260e8484846120eb565b61261a8484848461286c565b612659576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612650906134fb565b60405180910390fd5b50505050565b60606040518060800160405280604481526020016142f360449139905090565b606060008214156126c7576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506127db565b600082905060005b600082146126f95780806126e290613b7b565b915050600a826126f29190613997565b91506126cf565b60008167ffffffffffffffff81111561271557612714613ce0565b5b6040519080825280601f01601f1916602001820160405280156127475781602001600182028036833780820191505090505b5090505b600085146127d45760018261276091906139c8565b9150600a8561276f9190613bc4565b603061277b9190613941565b60f81b81838151811061279157612790613cb1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856127cd9190613997565b945061274b565b8093505050505b919050565b6001816000016000828254019250508190555050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b600061288d8473ffffffffffffffffffffffffffffffffffffffff16612a03565b156129f6578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026128b6611c64565b8786866040518563ffffffff1660e01b81526004016128d894939291906133bf565b602060405180830381600087803b1580156128f257600080fd5b505af192505050801561292357506040513d601f19601f820116820180604052508101906129209190612da2565b60015b6129a6573d8060008114612953576040519150601f19603f3d011682016040523d82523d6000602084013e612958565b606091505b5060008151141561299e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612995906134fb565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506129fb565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000612a39612a3484613896565b613871565b90508083825260208201905082856020860282011115612a5c57612a5b613d14565b5b60005b85811015612a8c5781612a728882612b88565b845260208401935060208301925050600181019050612a5f565b5050509392505050565b6000612aa9612aa4846138c2565b613871565b905082815260208101848484011115612ac557612ac4613d19565b5b612ad0848285613aac565b509392505050565b600081359050612ae781614296565b92915050565b600082601f830112612b0257612b01613d0f565b5b8135612b12848260208601612a26565b91505092915050565b600081359050612b2a816142ad565b92915050565b600081359050612b3f816142c4565b92915050565b600081519050612b54816142c4565b92915050565b600082601f830112612b6f57612b6e613d0f565b5b8135612b7f848260208601612a96565b91505092915050565b600081359050612b97816142db565b92915050565b600081519050612bac816142db565b92915050565b600060208284031215612bc857612bc7613d23565b5b6000612bd684828501612ad8565b91505092915050565b60008060408385031215612bf657612bf5613d23565b5b6000612c0485828601612ad8565b9250506020612c1585828601612ad8565b9150509250929050565b600080600060608486031215612c3857612c37613d23565b5b6000612c4686828701612ad8565b9350506020612c5786828701612ad8565b9250506040612c6886828701612b88565b9150509250925092565b60008060008060808587031215612c8c57612c8b613d23565b5b6000612c9a87828801612ad8565b9450506020612cab87828801612ad8565b9350506040612cbc87828801612b88565b925050606085013567ffffffffffffffff811115612cdd57612cdc613d1e565b5b612ce987828801612b5a565b91505092959194509250565b60008060408385031215612d0c57612d0b613d23565b5b6000612d1a85828601612ad8565b9250506020612d2b85828601612b1b565b9150509250929050565b60008060408385031215612d4c57612d4b613d23565b5b6000612d5a85828601612ad8565b9250506020612d6b85828601612b88565b9150509250929050565b600060208284031215612d8b57612d8a613d23565b5b6000612d9984828501612b30565b91505092915050565b600060208284031215612db857612db7613d23565b5b6000612dc684828501612b45565b91505092915050565b600060208284031215612de557612de4613d23565b5b6000612df384828501612b88565b91505092915050565b600060208284031215612e1257612e11613d23565b5b6000612e2084828501612b9d565b91505092915050565b60008060408385031215612e4057612e3f613d23565b5b6000612e4e85828601612b88565b925050602083013567ffffffffffffffff811115612e6f57612e6e613d1e565b5b612e7b85828601612aed565b9150509250929050565b612e8e816139fc565b82525050565b612e9d81613a0e565b82525050565b612eac81613a1a565b82525050565b6000612ebd826138f3565b612ec78185613909565b9350612ed7818560208601613abb565b612ee081613d28565b840191505092915050565b6000612ef6826138fe565b612f008185613925565b9350612f10818560208601613abb565b612f1981613d28565b840191505092915050565b6000612f2f826138fe565b612f398185613936565b9350612f49818560208601613abb565b80840191505092915050565b6000612f62601883613925565b9150612f6d82613d39565b602082019050919050565b6000612f85601883613925565b9150612f9082613d62565b602082019050919050565b6000612fa8601683613925565b9150612fb382613d8b565b602082019050919050565b6000612fcb603283613925565b9150612fd682613db4565b604082019050919050565b6000612fee602683613925565b9150612ff982613e03565b604082019050919050565b6000613011602583613925565b915061301c82613e52565b604082019050919050565b6000613034601c83613925565b915061303f82613ea1565b602082019050919050565b6000613057601383613925565b915061306282613eca565b602082019050919050565b600061307a601d83613925565b915061308582613ef3565b602082019050919050565b600061309d601183613925565b91506130a882613f1c565b602082019050919050565b60006130c0602483613925565b91506130cb82613f45565b604082019050919050565b60006130e3601983613925565b91506130ee82613f94565b602082019050919050565b6000613106601083613925565b915061311182613fbd565b602082019050919050565b6000613129601283613925565b915061313482613fe6565b602082019050919050565b600061314c601383613925565b91506131578261400f565b602082019050919050565b600061316f601683613925565b915061317a82614038565b602082019050919050565b6000613192602983613925565b915061319d82614061565b604082019050919050565b60006131b5603e83613925565b91506131c0826140b0565b604082019050919050565b60006131d8602083613925565b91506131e3826140ff565b602082019050919050565b60006131fb601083613925565b915061320682614128565b602082019050919050565b600061321e601483613925565b915061322982614151565b602082019050919050565b6000613241602083613925565b915061324c8261417a565b602082019050919050565b6000613264601883613925565b915061326f826141a3565b602082019050919050565b6000613287602183613925565b9150613292826141cc565b604082019050919050565b60006132aa60008361391a565b91506132b58261421b565b600082019050919050565b60006132cd601c83613925565b91506132d88261421e565b602082019050919050565b60006132f0602e83613925565b91506132fb82614247565b604082019050919050565b61330f81613a50565b82525050565b61331e81613a7e565b82525050565b61332d81613a88565b82525050565b61333c81613a98565b82525050565b600061334e8285612f24565b915061335a8284612f24565b91508190509392505050565b60006133718261329d565b9150819050919050565b60006020820190506133906000830184612e85565b92915050565b60006040820190506133ab6000830185612e85565b6133b86020830184612e85565b9392505050565b60006080820190506133d46000830187612e85565b6133e16020830186612e85565b6133ee6040830185613315565b81810360608301526134008184612eb2565b905095945050505050565b60006020820190506134206000830184612e94565b92915050565b600060a08201905061343b6000830188612ea3565b6134486020830187613333565b6134556040830186613306565b6134626060830185613324565b61346f6080830184613324565b9695505050505050565b600060208201905081810360008301526134938184612eeb565b905092915050565b600060208201905081810360008301526134b481612f55565b9050919050565b600060208201905081810360008301526134d481612f78565b9050919050565b600060208201905081810360008301526134f481612f9b565b9050919050565b6000602082019050818103600083015261351481612fbe565b9050919050565b6000602082019050818103600083015261353481612fe1565b9050919050565b6000602082019050818103600083015261355481613004565b9050919050565b6000602082019050818103600083015261357481613027565b9050919050565b600060208201905081810360008301526135948161304a565b9050919050565b600060208201905081810360008301526135b48161306d565b9050919050565b600060208201905081810360008301526135d481613090565b9050919050565b600060208201905081810360008301526135f4816130b3565b9050919050565b60006020820190508181036000830152613614816130d6565b9050919050565b60006020820190508181036000830152613634816130f9565b9050919050565b600060208201905081810360008301526136548161311c565b9050919050565b600060208201905081810360008301526136748161313f565b9050919050565b6000602082019050818103600083015261369481613162565b9050919050565b600060208201905081810360008301526136b481613185565b9050919050565b600060208201905081810360008301526136d4816131a8565b9050919050565b600060208201905081810360008301526136f4816131cb565b9050919050565b60006020820190508181036000830152613714816131ee565b9050919050565b6000602082019050818103600083015261373481613211565b9050919050565b6000602082019050818103600083015261375481613234565b9050919050565b6000602082019050818103600083015261377481613257565b9050919050565b600060208201905081810360008301526137948161327a565b9050919050565b600060208201905081810360008301526137b4816132c0565b9050919050565b600060208201905081810360008301526137d4816132e3565b9050919050565b60006020820190506137f06000830184613306565b92915050565b600060208201905061380b6000830184613315565b92915050565b60006080820190506138266000830187613315565b6138336020830186613315565b6138406040830185613315565b61384d6060830184613315565b95945050505050565b600060208201905061386b6000830184613324565b92915050565b600061387b61388c565b90506138878282613b4a565b919050565b6000604051905090565b600067ffffffffffffffff8211156138b1576138b0613ce0565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156138dd576138dc613ce0565b5b6138e682613d28565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061394c82613a7e565b915061395783613a7e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561398c5761398b613bf5565b5b828201905092915050565b60006139a282613a7e565b91506139ad83613a7e565b9250826139bd576139bc613c24565b5b828204905092915050565b60006139d382613a7e565b91506139de83613a7e565b9250828210156139f1576139f0613bf5565b5b828203905092915050565b6000613a0782613a5e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015613ad9578082015181840152602081019050613abe565b83811115613ae8576000848401525b50505050565b6000613af982613a7e565b91506000821415613b0d57613b0c613bf5565b5b600182039050919050565b60006002820490506001821680613b3057607f821691505b60208210811415613b4457613b43613c53565b5b50919050565b613b5382613d28565b810181811067ffffffffffffffff82111715613b7257613b71613ce0565b5b80604052505050565b6000613b8682613a7e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613bb957613bb8613bf5565b5b600182019050919050565b6000613bcf82613a7e565b9150613bda83613a7e565b925082613bea57613be9613c24565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f72616e646f6d20616c7265616479207265717565737465640000000000000000600082015250565b7f50726f636565647320616c726561647920636c61696d65640000000000000000600082015250565b7f556e7375636365737366756c20696e207061796f757400000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f656e74726f707920616c72656164792073657400000000000000000000000000600082015250565b7f4164647265737320646f6573206e6f74206f776e2061207469636b6574000000600082015250565b7f526166666c65207374696c6c206f70656e000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f526166666c652068617320656e64656400000000000000000000000000000000600082015250565b7f456e74726f7079206973206e6f74207365740000000000000000000000000000600082015250565b7f41646472657373206f776e73207469636b657400000000000000000000000000600082015250565b7f72657175657374496420646f206e6f74206d6174636800000000000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f416c6c207469636b65747320736f6c6400000000000000000000000000000000600082015250565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4d617820616c6c6f77207065722061646472657373206d696e74656400000000600082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b61429f816139fc565b81146142aa57600080fd5b50565b6142b681613a0e565b81146142c157600080fd5b50565b6142cd81613a24565b81146142d857600080fd5b50565b6142e481613a7e565b81146142ef57600080fd5b5056fe68747470733a2f2f697066732e696f2f697066732f516d5178446a45686e5950365141744c52794c56394e37646e316b4469677a3769576e783570736d7958717933352fa26469706673582212209b936311d8ad5d462d1e5635076e9729370feeecc5f7d1818c6d60fbed8a06b164736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c80636352211e11610123578063be204c14116100ab578063e6f8bff71161006f578063e6f8bff7146107b8578063e985e9c5146107e3578063edca914c14610820578063f2fde38b1461082a578063f8413b07146108535761021a565b8063be204c14146106cf578063c662e481146106fa578063c87b56dd14610725578063d089adc714610762578063d60ed9a81461078d5761021a565b80638da5cb5b116100f25780638da5cb5b146105fc57806395d89b4114610627578063a22cb46514610652578063b438e12e1461067b578063b88d4fde146106a65761021a565b80636352211e1461052e57806370a082311461056b578063715018a6146105a85780637885142d146105bf5761021a565b806316a098cb116101a657806342842e0e1161017557806342842e0e1461046d5780634694ad9c1461049657806347ce07cc146104c157806355003593146104ec5780635bc46074146105035761021a565b806316a098cb146103c55780631fe543e3146103f057806323b872dd1461041957806333d608f1146104425761021a565b8063081812fc116101ed578063081812fc146102dd578063095ea7b31461031a57806309e69ede146103435780630aaef285146103835780631249c58b146103ae5761021a565b806301ffc9a71461021f578063060cb05d1461025c57806306fdde0314610287578063077001b9146102b2575b600080fd5b34801561022b57600080fd5b5061024660048036038101906102419190612d75565b61086a565b604051610253919061340b565b60405180910390f35b34801561026857600080fd5b5061027161094c565b60405161027e919061340b565b60405180910390f35b34801561029357600080fd5b5061029c6109bc565b6040516102a99190613479565b60405180910390f35b3480156102be57600080fd5b506102c7610a4e565b6040516102d491906137f6565b60405180910390f35b3480156102e957600080fd5b5061030460048036038101906102ff9190612dcf565b610a58565b604051610311919061337b565b60405180910390f35b34801561032657600080fd5b50610341600480360381019061033c9190612d35565b610a9e565b005b34801561034f57600080fd5b5061036a60048036038101906103659190612bb2565b610bb6565b60405161037a9493929190613811565b60405180910390f35b34801561038f57600080fd5b50610398610be6565b6040516103a591906137f6565b60405180910390f35b3480156103ba57600080fd5b506103c3610c0a565b005b3480156103d157600080fd5b506103da610f93565b6040516103e791906137f6565b60405180910390f35b3480156103fc57600080fd5b5061041760048036038101906104129190612e29565b610fa4565b005b34801561042557600080fd5b50610440600480360381019061043b9190612c1f565b611064565b005b34801561044e57600080fd5b506104576110c4565b6040516104649190613856565b60405180910390f35b34801561047957600080fd5b50610494600480360381019061048f9190612c1f565b6110cb565b005b3480156104a257600080fd5b506104ab6110eb565b6040516104b89190613856565b60405180910390f35b3480156104cd57600080fd5b506104d66110f0565b6040516104e391906137f6565b60405180910390f35b3480156104f857600080fd5b506105016110f6565b005b34801561050f57600080fd5b50610518611260565b604051610525919061340b565b60405180910390f35b34801561053a57600080fd5b5061055560048036038101906105509190612dcf565b611273565b604051610562919061337b565b60405180910390f35b34801561057757600080fd5b50610592600480360381019061058d9190612bb2565b611325565b60405161059f91906137f6565b60405180910390f35b3480156105b457600080fd5b506105bd6113dd565b005b3480156105cb57600080fd5b506105e660048036038101906105e19190612dcf565b6113f1565b6040516105f391906137f6565b60405180910390f35b34801561060857600080fd5b50610611611415565b60405161061e919061337b565b60405180910390f35b34801561063357600080fd5b5061063c61143f565b6040516106499190613479565b60405180910390f35b34801561065e57600080fd5b5061067960048036038101906106749190612cf5565b6114d1565b005b34801561068757600080fd5b506106906114e7565b60405161069d91906137f6565b60405180910390f35b3480156106b257600080fd5b506106cd60048036038101906106c89190612c72565b61150b565b005b3480156106db57600080fd5b506106e461156d565b6040516106f191906137f6565b60405180910390f35b34801561070657600080fd5b5061070f611579565b60405161071c91906137f6565b60405180910390f35b34801561073157600080fd5b5061074c60048036038101906107479190612dcf565b61159d565b6040516107599190613479565b60405180910390f35b34801561076e57600080fd5b50610777611605565b60405161078491906137db565b60405180910390f35b34801561079957600080fd5b506107a261160a565b6040516107af91906137f6565b60405180910390f35b3480156107c457600080fd5b506107cd611617565b6040516107da91906137f6565b60405180910390f35b3480156107ef57600080fd5b5061080a60048036038101906108059190612bdf565b61163b565b604051610817919061340b565b60405180910390f35b6108286116cf565b005b34801561083657600080fd5b50610851600480360381019061084c9190612bb2565b611991565b005b34801561085f57600080fd5b50610868611a15565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061093557507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610945575061094482611ba1565b5b9050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000610979600b611c0b565b1080156109a657507f00000000000000000000000000000000000000000000000000000000000000004311155b156109b457600190506109b9565b600090505b90565b6060600080546109cb90613b18565b80601f01602080910402602001604051908101604052809291908181526020018280546109f790613b18565b8015610a445780601f10610a1957610100808354040283529160200191610a44565b820191906000526020600020905b815481529060010190602001808311610a2757829003601f168201915b5050505050905090565b6000600c54905090565b6000610a6382611c19565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610aa982611273565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b119061377b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff16610b39611c64565b73ffffffffffffffffffffffffffffffffffffffff161480610b685750610b6781610b62611c64565b61163b565b5b610ba7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b9e906136bb565b60405180910390fd5b610bb18383611c6c565b505050565b60076020528060005260406000206000915090508060000154908060010154908060020154908060030154905084565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003015411610c8f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c869061359b565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015410610d33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2a9061379b565b60405180910390fd5b610d3b61094c565b15610d7b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d72906135bb565b60405180910390fd5b60006009541415610dc1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db89061363b565b60405180910390fd5b6000610dcb611d25565b9050600060088281548110610de357610de2613cb1565b5b90600052602060002001549050610dfa3382611d3f565b610e0382611f19565b81600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555080600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000181905550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000815480929190610ee490613aee565b9190505550600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002016000815480929190610f3c90613b7b565b91905055503373ffffffffffffffffffffffffffffffffffffffff167f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe82604051610f8791906137f6565b60405180910390a25050565b6000610f9f600b611c0b565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461105657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161104d929190613396565b60405180910390fd5b6110608282611fa7565b5050565b61107561106f611c64565b82612056565b6110b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110ab906137bb565b60405180910390fd5b6110bf8383836120eb565b505050565b62124f8081565b6110e68383836040518060200160405280600081525061150b565b505050565b600a81565b60095481565b6110fe612352565b61110661094c565b15611146576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113d906135bb565b60405180910390fd5b600a60009054906101000a900460ff1615611196576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161118d906134bb565b60405180910390fd5b6001600a60006101000a81548160ff02191690831515021790555060003373ffffffffffffffffffffffffffffffffffffffff16476040516111d790613366565b60006040518083038185875af1925050503d8060008114611214576040519150601f19603f3d011682016040523d82523d6000602084013e611219565b606091505b505090508061125d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611254906134db565b60405180910390fd5b50565b600a60009054906101000a900460ff1681565b6000806002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561131c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113139061375b565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161138d9061369b565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6113e5612352565b6113ef60006123d0565b565b6008818154811061140157600080fd5b906000526020600020016000915090505481565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606001805461144e90613b18565b80601f016020809104026020016040519081016040528092919081815260200182805461147a90613b18565b80156114c75780601f1061149c576101008083540402835291602001916114c7565b820191906000526020600020905b8154815290600101906020018083116114aa57829003601f168201915b5050505050905090565b6114e36114dc611c64565b8383612496565b5050565b7f000000000000000000000000000000000000000000000000000000000000000081565b61151c611516611c64565b83612056565b61155b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611552906137bb565b60405180910390fd5b61156784848484612603565b50505050565b600b8060000154905081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606115a882611c19565b60006115b261265f565b905060008151116115d257604051806020016040528060008152506115fd565b806115dc8461267f565b6040516020016115ed929190613342565b6040516020818303038152906040525b915050919050565b600381565b6000600880549050905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f00000000000000000000000000000000000000000000000000000000000000006116fa600b611c0b565b1061173a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611731906136fb565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154106117de576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d59061365b565b60405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000341015611841576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118389061371b565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000004311156118a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161189b9061361b565b60405180910390fd5b600760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008154809291906118f790613b7b565b9190505550611906600b6127e0565b6008611912600b611c0b565b90806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff167f8ef92257fbc070823c8bb4051ff3a58b831946d893fbb1bfd9bc77b87ff77d0961197a600b611c0b565b60405161198791906137f6565b60405180910390a2565b611999612352565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a009061351b565b60405180910390fd5b611a12816123d0565b50565b6000600c5414611a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a519061349b565b60405180910390fd5b611a6261094c565b611aa1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a98906135bb565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000600362124f80600a6040518663ffffffff1660e01b8152600401611b47959493929190613426565b602060405180830381600087803b158015611b6157600080fd5b505af1158015611b75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b999190612dfc565b600c81905550565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b600081600001549050919050565b611c22816127f6565b611c61576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c589061375b565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611cdf83611273565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000600880549050600954611d3a9190613bc4565b905090565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611daf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611da6906136db565b60405180910390fd5b611db8816127f6565b15611df8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611def9061355b565b60405180910390fd5b611e0460008383612862565b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e549190613941565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611f1560008383612867565b5050565b6008805490508110611f2a57600080fd5b60086001600880549050611f3e91906139c8565b81548110611f4f57611f4e613cb1565b5b906000526020600020015460088281548110611f6e57611f6d613cb1565b5b90600052602060002001819055506008805480611f8e57611f8d613c82565b5b6001900381819060005260206000200160009055905550565b81600c5414611feb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fe29061367b565b60405180910390fd5b600060095414612030576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120279061357b565b60405180910390fd5b8060008151811061204457612043613cb1565b5b60200260200101516009819055505050565b60008061206283611273565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806120a457506120a3818561163b565b5b806120e257508373ffffffffffffffffffffffffffffffffffffffff166120ca84610a58565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661210b82611273565b73ffffffffffffffffffffffffffffffffffffffff1614612161576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121589061353b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156121d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121c8906135db565b60405180910390fd5b6121dc838383612862565b6121e7600082611c6c565b6001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461223791906139c8565b925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461228e9190613941565b92505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461234d838383612867565b505050565b61235a611c64565b73ffffffffffffffffffffffffffffffffffffffff16612378611415565b73ffffffffffffffffffffffffffffffffffffffff16146123ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c59061373b565b60405180910390fd5b565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415612505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016124fc906135fb565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516125f6919061340b565b60405180910390a3505050565b61260e8484846120eb565b61261a8484848461286c565b612659576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612650906134fb565b60405180910390fd5b50505050565b60606040518060800160405280604481526020016142f360449139905090565b606060008214156126c7576040518060400160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525090506127db565b600082905060005b600082146126f95780806126e290613b7b565b915050600a826126f29190613997565b91506126cf565b60008167ffffffffffffffff81111561271557612714613ce0565b5b6040519080825280601f01601f1916602001820160405280156127475781602001600182028036833780820191505090505b5090505b600085146127d45760018261276091906139c8565b9150600a8561276f9190613bc4565b603061277b9190613941565b60f81b81838151811061279157612790613cb1565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a856127cd9190613997565b945061274b565b8093505050505b919050565b6001816000016000828254019250508190555050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614159050919050565b505050565b505050565b600061288d8473ffffffffffffffffffffffffffffffffffffffff16612a03565b156129f6578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026128b6611c64565b8786866040518563ffffffff1660e01b81526004016128d894939291906133bf565b602060405180830381600087803b1580156128f257600080fd5b505af192505050801561292357506040513d601f19601f820116820180604052508101906129209190612da2565b60015b6129a6573d8060008114612953576040519150601f19603f3d011682016040523d82523d6000602084013e612958565b606091505b5060008151141561299e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612995906134fb565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149150506129fb565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000612a39612a3484613896565b613871565b90508083825260208201905082856020860282011115612a5c57612a5b613d14565b5b60005b85811015612a8c5781612a728882612b88565b845260208401935060208301925050600181019050612a5f565b5050509392505050565b6000612aa9612aa4846138c2565b613871565b905082815260208101848484011115612ac557612ac4613d19565b5b612ad0848285613aac565b509392505050565b600081359050612ae781614296565b92915050565b600082601f830112612b0257612b01613d0f565b5b8135612b12848260208601612a26565b91505092915050565b600081359050612b2a816142ad565b92915050565b600081359050612b3f816142c4565b92915050565b600081519050612b54816142c4565b92915050565b600082601f830112612b6f57612b6e613d0f565b5b8135612b7f848260208601612a96565b91505092915050565b600081359050612b97816142db565b92915050565b600081519050612bac816142db565b92915050565b600060208284031215612bc857612bc7613d23565b5b6000612bd684828501612ad8565b91505092915050565b60008060408385031215612bf657612bf5613d23565b5b6000612c0485828601612ad8565b9250506020612c1585828601612ad8565b9150509250929050565b600080600060608486031215612c3857612c37613d23565b5b6000612c4686828701612ad8565b9350506020612c5786828701612ad8565b9250506040612c6886828701612b88565b9150509250925092565b60008060008060808587031215612c8c57612c8b613d23565b5b6000612c9a87828801612ad8565b9450506020612cab87828801612ad8565b9350506040612cbc87828801612b88565b925050606085013567ffffffffffffffff811115612cdd57612cdc613d1e565b5b612ce987828801612b5a565b91505092959194509250565b60008060408385031215612d0c57612d0b613d23565b5b6000612d1a85828601612ad8565b9250506020612d2b85828601612b1b565b9150509250929050565b60008060408385031215612d4c57612d4b613d23565b5b6000612d5a85828601612ad8565b9250506020612d6b85828601612b88565b9150509250929050565b600060208284031215612d8b57612d8a613d23565b5b6000612d9984828501612b30565b91505092915050565b600060208284031215612db857612db7613d23565b5b6000612dc684828501612b45565b91505092915050565b600060208284031215612de557612de4613d23565b5b6000612df384828501612b88565b91505092915050565b600060208284031215612e1257612e11613d23565b5b6000612e2084828501612b9d565b91505092915050565b60008060408385031215612e4057612e3f613d23565b5b6000612e4e85828601612b88565b925050602083013567ffffffffffffffff811115612e6f57612e6e613d1e565b5b612e7b85828601612aed565b9150509250929050565b612e8e816139fc565b82525050565b612e9d81613a0e565b82525050565b612eac81613a1a565b82525050565b6000612ebd826138f3565b612ec78185613909565b9350612ed7818560208601613abb565b612ee081613d28565b840191505092915050565b6000612ef6826138fe565b612f008185613925565b9350612f10818560208601613abb565b612f1981613d28565b840191505092915050565b6000612f2f826138fe565b612f398185613936565b9350612f49818560208601613abb565b80840191505092915050565b6000612f62601883613925565b9150612f6d82613d39565b602082019050919050565b6000612f85601883613925565b9150612f9082613d62565b602082019050919050565b6000612fa8601683613925565b9150612fb382613d8b565b602082019050919050565b6000612fcb603283613925565b9150612fd682613db4565b604082019050919050565b6000612fee602683613925565b9150612ff982613e03565b604082019050919050565b6000613011602583613925565b915061301c82613e52565b604082019050919050565b6000613034601c83613925565b915061303f82613ea1565b602082019050919050565b6000613057601383613925565b915061306282613eca565b602082019050919050565b600061307a601d83613925565b915061308582613ef3565b602082019050919050565b600061309d601183613925565b91506130a882613f1c565b602082019050919050565b60006130c0602483613925565b91506130cb82613f45565b604082019050919050565b60006130e3601983613925565b91506130ee82613f94565b602082019050919050565b6000613106601083613925565b915061311182613fbd565b602082019050919050565b6000613129601283613925565b915061313482613fe6565b602082019050919050565b600061314c601383613925565b91506131578261400f565b602082019050919050565b600061316f601683613925565b915061317a82614038565b602082019050919050565b6000613192602983613925565b915061319d82614061565b604082019050919050565b60006131b5603e83613925565b91506131c0826140b0565b604082019050919050565b60006131d8602083613925565b91506131e3826140ff565b602082019050919050565b60006131fb601083613925565b915061320682614128565b602082019050919050565b600061321e601483613925565b915061322982614151565b602082019050919050565b6000613241602083613925565b915061324c8261417a565b602082019050919050565b6000613264601883613925565b915061326f826141a3565b602082019050919050565b6000613287602183613925565b9150613292826141cc565b604082019050919050565b60006132aa60008361391a565b91506132b58261421b565b600082019050919050565b60006132cd601c83613925565b91506132d88261421e565b602082019050919050565b60006132f0602e83613925565b91506132fb82614247565b604082019050919050565b61330f81613a50565b82525050565b61331e81613a7e565b82525050565b61332d81613a88565b82525050565b61333c81613a98565b82525050565b600061334e8285612f24565b915061335a8284612f24565b91508190509392505050565b60006133718261329d565b9150819050919050565b60006020820190506133906000830184612e85565b92915050565b60006040820190506133ab6000830185612e85565b6133b86020830184612e85565b9392505050565b60006080820190506133d46000830187612e85565b6133e16020830186612e85565b6133ee6040830185613315565b81810360608301526134008184612eb2565b905095945050505050565b60006020820190506134206000830184612e94565b92915050565b600060a08201905061343b6000830188612ea3565b6134486020830187613333565b6134556040830186613306565b6134626060830185613324565b61346f6080830184613324565b9695505050505050565b600060208201905081810360008301526134938184612eeb565b905092915050565b600060208201905081810360008301526134b481612f55565b9050919050565b600060208201905081810360008301526134d481612f78565b9050919050565b600060208201905081810360008301526134f481612f9b565b9050919050565b6000602082019050818103600083015261351481612fbe565b9050919050565b6000602082019050818103600083015261353481612fe1565b9050919050565b6000602082019050818103600083015261355481613004565b9050919050565b6000602082019050818103600083015261357481613027565b9050919050565b600060208201905081810360008301526135948161304a565b9050919050565b600060208201905081810360008301526135b48161306d565b9050919050565b600060208201905081810360008301526135d481613090565b9050919050565b600060208201905081810360008301526135f4816130b3565b9050919050565b60006020820190508181036000830152613614816130d6565b9050919050565b60006020820190508181036000830152613634816130f9565b9050919050565b600060208201905081810360008301526136548161311c565b9050919050565b600060208201905081810360008301526136748161313f565b9050919050565b6000602082019050818103600083015261369481613162565b9050919050565b600060208201905081810360008301526136b481613185565b9050919050565b600060208201905081810360008301526136d4816131a8565b9050919050565b600060208201905081810360008301526136f4816131cb565b9050919050565b60006020820190508181036000830152613714816131ee565b9050919050565b6000602082019050818103600083015261373481613211565b9050919050565b6000602082019050818103600083015261375481613234565b9050919050565b6000602082019050818103600083015261377481613257565b9050919050565b600060208201905081810360008301526137948161327a565b9050919050565b600060208201905081810360008301526137b4816132c0565b9050919050565b600060208201905081810360008301526137d4816132e3565b9050919050565b60006020820190506137f06000830184613306565b92915050565b600060208201905061380b6000830184613315565b92915050565b60006080820190506138266000830187613315565b6138336020830186613315565b6138406040830185613315565b61384d6060830184613315565b95945050505050565b600060208201905061386b6000830184613324565b92915050565b600061387b61388c565b90506138878282613b4a565b919050565b6000604051905090565b600067ffffffffffffffff8211156138b1576138b0613ce0565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156138dd576138dc613ce0565b5b6138e682613d28565b9050602081019050919050565b600081519050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b600061394c82613a7e565b915061395783613a7e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561398c5761398b613bf5565b5b828201905092915050565b60006139a282613a7e565b91506139ad83613a7e565b9250826139bd576139bc613c24565b5b828204905092915050565b60006139d382613a7e565b91506139de83613a7e565b9250828210156139f1576139f0613bf5565b5b828203905092915050565b6000613a0782613a5e565b9050919050565b60008115159050919050565b6000819050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015613ad9578082015181840152602081019050613abe565b83811115613ae8576000848401525b50505050565b6000613af982613a7e565b91506000821415613b0d57613b0c613bf5565b5b600182039050919050565b60006002820490506001821680613b3057607f821691505b60208210811415613b4457613b43613c53565b5b50919050565b613b5382613d28565b810181811067ffffffffffffffff82111715613b7257613b71613ce0565b5b80604052505050565b6000613b8682613a7e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613bb957613bb8613bf5565b5b600182019050919050565b6000613bcf82613a7e565b9150613bda83613a7e565b925082613bea57613be9613c24565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f72616e646f6d20616c7265616479207265717565737465640000000000000000600082015250565b7f50726f636565647320616c726561647920636c61696d65640000000000000000600082015250565b7f556e7375636365737366756c20696e207061796f757400000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b7f656e74726f707920616c72656164792073657400000000000000000000000000600082015250565b7f4164647265737320646f6573206e6f74206f776e2061207469636b6574000000600082015250565b7f526166666c65207374696c6c206f70656e000000000000000000000000000000600082015250565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b7f526166666c652068617320656e64656400000000000000000000000000000000600082015250565b7f456e74726f7079206973206e6f74207365740000000000000000000000000000600082015250565b7f41646472657373206f776e73207469636b657400000000000000000000000000600082015250565b7f72657175657374496420646f206e6f74206d6174636800000000000000000000600082015250565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206e6f7220617070726f76656420666f7220616c6c0000602082015250565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b7f416c6c207469636b65747320736f6c6400000000000000000000000000000000600082015250565b7f496e73756666696369656e74207061796d656e74000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b50565b7f4d617820616c6c6f77207065722061646472657373206d696e74656400000000600082015250565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206e6f7220617070726f766564000000000000000000000000000000000000602082015250565b61429f816139fc565b81146142aa57600080fd5b50565b6142b681613a0e565b81146142c157600080fd5b50565b6142cd81613a24565b81146142d857600080fd5b50565b6142e481613a7e565b81146142ef57600080fd5b5056fe68747470733a2f2f697066732e696f2f697066732f516d5178446a45686e5950365141744c52794c56394e37646e316b4469677a3769576e783570736d7958717933352fa26469706673582212209b936311d8ad5d462d1e5635076e9729370feeecc5f7d1818c6d60fbed8a06b164736f6c63430008070033",
>>>>>>> d9129dd5c450a8f33fec746d898c727824f6f2f7
  "devdoc": {
    "author": "Rloot",
    "events": {
      "Minted(address,uint256)": {
        "params": {
          "tokenId": "Number of the ticket sold",
          "user": "Address of raffle participant"
        }
      },
      "TicketSold(address,uint256)": {
        "params": {
          "ticketId": "Number of the ticket sold",
          "user": "Address of raffle participant"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "constructor": {
        "params": {
          "_AVAILABLE_SUPPLY": "total NFTs to sell",
          "_MINT_COST": "in wei per ticket"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "ShuffleOne",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Minted(address,uint256)": {
        "notice": "Emitted after a successful mint "
      },
      "TicketSold(address,uint256)": {
        "notice": "Emitted after a successful ticket sell "
      }
    },
    "kind": "user",
    "methods": {
      "AVAILABLE_SUPPLY()": {
        "notice": "Avalible NFTs to be minted"
      },
      "MAX_PER_ADDRESS()": {
        "notice": "Maximum tickets per address"
      },
      "MINT_COST()": {
        "notice": "Minimum cost for ticket"
      },
      "NFTsId(uint256)": {
        "notice": "Array of NFTs ID to be minted "
      },
      "RAFFLE_FINALIZATION_BLOCKNUMBER()": {
        "notice": "Blocknumber raffle ends at."
      },
      "_soldTicketsCounter()": {
        "notice": "Keeps track of sold tickets "
      },
      "buyTicket()": {
        "notice": "Enters raffle "
      },
      "constructor": {
        "notice": "Creates a new NFT distribution contract"
      },
      "entropy()": {
        "notice": "Source of entropy"
      },
      "getNFTsIdLength()": {
        "notice": "Get the lengths of the NFTsIds array"
      },
      "getSoldTickets()": {
        "notice": "Get total numbers of tickets sold "
      },
      "mint()": {
        "notice": "Generate rand index for the NFTid, mint NFT and remove it from array "
      },
      "participants(address)": {
        "notice": "Keep track of participants "
      },
      "proceedsClaimed()": {
        "notice": "Owner has claimed raffle proceeds"
      },
      "withdrawRaffleProceeds()": {
        "notice": "Allows contract owner to withdraw proceeds of tickets"
      }
    },
    "notice": "ERC721 randomized distribution",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 285,
        "contract": "contracts/ShuffleOne.sol:ShuffleOne",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 287,
        "contract": "contracts/ShuffleOne.sol:ShuffleOne",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 291,
        "contract": "contracts/ShuffleOne.sol:ShuffleOne",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 295,
        "contract": "contracts/ShuffleOne.sol:ShuffleOne",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 299,
        "contract": "contracts/ShuffleOne.sol:ShuffleOne",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 305,
        "contract": "contracts/ShuffleOne.sol:ShuffleOne",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 154,
        "contract": "contracts/ShuffleOne.sol:ShuffleOne",
        "label": "_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1986,
        "contract": "contracts/ShuffleOne.sol:ShuffleOne",
        "label": "participants",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_struct(Participant)1967_storage)"
      },
      {
        "astId": 1990,
        "contract": "contracts/ShuffleOne.sol:ShuffleOne",
        "label": "NFTsId",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1993,
        "contract": "contracts/ShuffleOne.sol:ShuffleOne",
        "label": "entropy",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1997,
        "contract": "contracts/ShuffleOne.sol:ShuffleOne",
        "label": "proceedsClaimed",
        "offset": 0,
        "slot": "10",
        "type": "t_bool"
      },
      {
        "astId": 2001,
        "contract": "contracts/ShuffleOne.sol:ShuffleOne",
        "label": "_soldTicketsCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_struct(Counter)1610_storage"
      },
      {
        "astId": 2007,
        "contract": "contracts/ShuffleOne.sol:ShuffleOne",
        "label": "_requestId",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_struct(Participant)1967_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ShuffleOne.Participant)",
        "numberOfBytes": "32",
        "value": "t_struct(Participant)1967_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)1610_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 1609,
            "contract": "contracts/ShuffleOne.sol:ShuffleOne",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Participant)1967_storage": {
        "encoding": "inplace",
        "label": "struct ShuffleOne.Participant",
        "members": [
          {
            "astId": 1960,
            "contract": "contracts/ShuffleOne.sol:ShuffleOne",
            "label": "tokenId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1962,
            "contract": "contracts/ShuffleOne.sol:ShuffleOne",
            "label": "randomIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1964,
            "contract": "contracts/ShuffleOne.sol:ShuffleOne",
            "label": "minted",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1966,
            "contract": "contracts/ShuffleOne.sol:ShuffleOne",
            "label": "ownedTickets",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}